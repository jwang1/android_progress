
7/16/2017 (Sunday) 


  Android's :  Activity ,  Service ,  Receiver , ContentProvider


1. Chapter 1 (Activity)

   onCreate -> onStart -> onResume -> run -> onPause -> onStop -> onRestart (back to onStart) or onDestroy (go to destroy)


   My take on these:  onStart (not necessary showing the activity on screen yet);  onResume can show  (need to come back to revisit it)


   TODO:  need to write that Demo, to show 2 activities sequence ...

       
     Completed it on 7/22/17 (Sat) https://github.com/jwang1/onPauseCalledBeforeAnotherActivityOnResume


7/20/17 (Thursday)

1. revisit Activity

   think of activity on the phone :   onCreate -- the activity is in mem and CPU now;   onStart -- the activity is warming up, but not visible yet;   onResume -- the activity is on screen now.



    so,  "onStart" vs "onResume" :  onResume activity is on Screen;  but onStart is not yet, almost there.    Think of the phone :  memory,  back of display, front of display  ---  |->|->|   so, onCreate (on memory), onStart (back of screen), onResume (front display) ...


  1.1  onPause of an Activity must be executed, before another activity's onResume ...

  1.2  when user's back to previous activity:  onRestart -> onStart -> onResume  executed

  1.3  when user switch to home or another activity;  previous activity's onPause -> onStop executed .

  1.4  when user click "back" soft button;  onPause -> onStop -> onDestroy

  1.5  should NOT do heavy work in onPause, because the next Activity's onResume cannot start until previous Activity's onPause completes


7/21/17 (Friday)

TODO:  

  *) Chapter 1, P6  example, how to make 2 activities swap, ie, one activity goes out, and the other comes in, to show the 1st activity's onPause is called before 2nd activity's onResume .

      "how to" part,  perhaps create 2 apps ?   or, can we have 2 activities in one app, and do the switch ? <--  should be, for instance : 
      a) create one activity with all todo list
    b) once click a todo item, go to the Details of the item.

  Did this before when creating the Movie review app, forgot it now,   <== Completed this on Saturday, in one App, created 2 activites (like Todo List;  and todoItem  two activities; and use Intent to startActivity;  and added onPause and onResume overrided methods simply for comments)


  ***   Completed it on 7/22/17 (Sat) https://github.com/jwang1/onPauseCalledBeforeAnotherActivityOnResume


7/22/17 (Saturday)

  1. working on TODOs from 7/21

  2. About Activities Priorities :  Activity showing on screen and user can interact with it  -->  Activity on front but not able to interact with users (for instance, the activitiy is front, but it has a dialog up, hence, user cannot interact with the activity, but the dialog)   -->  Activity not on screen 

  3.  Activity Priorities :  activites killed when out of resources

  4.  Activity LaunchMode !  --- important topic

    standard

    singleTop

    singleTask

    singleInstance



 5.  IntentFilter  matching ...

     action matching

     category matching

     data matching



7/22/17 (Satureday)

 Chapter 2 : IPC

 1. Binder


 2. Socket


 3. android:process

    *) can only be defined from Manifest file;

  *) process-name starts with  ':' character, means 'private process'

                  not start ':',  means the 'shared process' 

    *) SHARED DATA !!!

     the threading-synchronized may not working in processes-shared-data ...

    
  
    Inter-Process mechanism : 

      a) Intent passing data

      b) shared files

      c) SharedPreferences

      d) Binder Messenger

      e) AIDL

      -) ContentProvider

      f) Socket  (the Kernel level, Linux sys) and ...

      g) old days: I tried Pipe, socket, almost the shared memory (but just stopped at the analysis)


    Data-passing:

        a) serializable

        serialVersionUID --   if old objection has value 1L ;   the new class has value 2L,  and then,  (Serialized-Class) ObjectInputStream(FileInputStream("serialized-obj"))  will not work.


        if not set serialVersionUID in the class, deserialization will calculate hashCode from the object, and assign it to serialVersionUID.  Now, if class's new field or field-deleted, the hashCode will be different for the obj serialized before class change which also not serialVersionUID set.   Then, the deserialization going to fail.


      b) Parcelable

         In android apps, use Parcelable is better than Serializable; usage wise Parcelable is a little more typings; but i/o expense is small, and faster.



      c) Binder  <--- Chapter 2 (p52)

          *)  AIDL (Android Interface Definition Language ? )  -  also uses package, but still different from existing other Java classes.

              describe the interface methods (similar to RMI's methods? webmethods ? )  getBookList  and addBook defined in IBookManager.aidl

          *)  auto generated coe IBookManager.java from IBookManager.aidl file

              IBookManager includes Stub class which is used for anything transmit in the same process
                                    Proxy class for transmit in Different Processes.

          

              in case of two processes communication (IPC) using Binder;  the flow (cycle):

                   Client -> Binder -> Service (onTransact) -> thread-pool -> reply -> Binder -> Client


          *)  we can write Binder without AIDL file;  the AIDL file is used to generate Binder class.

                note the android.os.IInterface  

                         IBinder::transact


          *) Binder death (remote side terminated)   -- set some callback to notify service so that it can handle Binder death.

              IBinder::linkToDeath   IBinder::unlinkToDeath 



      d) Sharing with files :   process-1 writes to a file;   and process-2 reads from that file.


             now, if both write to the file, the shared-file can be problem .



      e) SharedPreferences

            data saved in /data/data/package-name/shared_prefs  directory

            the data can be lost, not recommended for IPC data sharing.



      f) Messenger

          it's built on AIDL, light-weight IPC :

            i. service layer :  MessengerService extends Service
            ii. client side  :  MessengerHandler extends Handler


      g) AIDL 

            supports :  primirary types (int, long, char, boolean, double etc)
                        String and CharSequence
                        List (only ArrayList and all its elements have to be supported by AIDL)
                        Map (only HashMap and all its elements have to be supported by AIDL)
                        Parcelable  (any objs implements Parcelable interface)
                        AIDL 


            



        binder pool 

          Binder mBinderPool = new BinderPool.BinderpoolImpl();



  *) ContentProvider (built on top of Binder)


  *) Socket 


    need permissions

    <uses-permission android:name="android.permission.INTERNET" />
    <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />


    TcpServer -  
    
      svrSckt = new ServerSocket(18001);

      final Socket client = svrSckt.accept();

      new Thread() { 
        @Override
        public void run() {
          responseClient(client);
        }
      }.start();

      void responseClient(Socket sckt) {
        .
        .
        .
      }





 4. android:thread


 7/27/17 (Thr) -  P121 ICP comparison -  

   bundler vs Shared-file vs AIDL vs Messenger vs ContentProvider vs Socket 

  
    BinderPool 



7/31/17 (Monday) 

   *) Completed reading "Android from scratch to master" -

      there are some good stuff, the structure is very clear, and learned quite a lot;  

    worth of reading again;  and the Final Project is good.



   *) watched 李宏毅's ML,  the 2'51" of https://www.youtube.com/watch?v=IzHoNwlCGnE&list=PLJV_el3uVTsPMxPbjeX7PicgWbY7F8wW9 is very helpful,

       watched "https://www.youtube.com/watch?v=IzHoNwlCGnE&list=PLJV_el3uVTsPMxPbjeX7PicgWbY7F8wW9"  (brief introduction of Deep Learning - very helpful on concept ,  history, simple, slow are better)

     watched "https://www.youtube.com/watch?v=FrKWiRv254g&list=PLJV_el3uVTsPy9oCRY30oBPNLCo89yu49&index=10" (CNN - Convolutional Neuro network) it's good, clearly explained CNN

     ==> TODO:  to watch the 2 videos of RNN (Recurrant Neuro Network)  --- links from Mr's Li's channel !



8/1/17 (Tue) 

View and event handling

  when an event raised, it goes through 
          Activity->Window->View 

  If view's onTouchEvent returns "false", ie, not handling such event, and then it will bubble up to Window, if still not handled, and then bubble up to Activity to be handled.  (similar to emergency handling, worker handles it first, if not able to, and then pass up to supervisor...) 


    1. one touch event, 

     *)  boolean dispatchTouchEvent(MotionEvent ev)

           "dispatch", if event dispatched to current-View, this method is called; and returns current-View's onTouchEvent and child view's dispatchTouchEvent method's value.

     *)  boolean onInterceptTouchEvent(MotionEvent ev)

           "used inside view's dispatchTouchEvent method - ie the above one", 

     *) boolean onTouchEvent(MotionEvent ev)


        used in dispatchTouchEvent method; used to handle that event, 


  In summary, 

    public boolean dispatchTouchEvent(MotionEvent ev) {
      boolean consume = false;

      if (onInterceptTouchEvent(ev)) {
        consume = onTouchEvent(ev);
      } else {
        consume = child.dispatchTouchEvent(ev);    // notice the child 
      }

      return consume;

    }



  
  2. the other book "Android from novice to master",  chapter 2, re-visit

      "ADB"  -- Android Debug Bridge   


         Goals / Motivations :   1) under the hood,  2) automation / batch processing -- kind like the Tomcat script auto dispatching


      adb devices   (after phone set usb debug, https://developer.android.com/studio/command-line/adb.html,  and connected to phone, and after brew install adb -- check google;   and now showed the physical phone connected via adb !)

    note, not checked android_sdk/platform-tools yet ...


  ==>  if adb NOT working, it's good to restart adb server

      adb kill-server


    ==>  The Wi-Fi connect (adb) is very useful (way of setting is also documented above)

  :build-tools $ adb tcpip 5555
  restarting in TCP mode port: 5555
  :build-tools $ adb connect 192.168.1.2
  connected to 192.168.1.2:5555
  :build-tools $ 


  --> verifying:

  adb devices
  List of devices attached
  192.168.1.2:5555  device


    --> Query for device
  adb devices -l
   
    192.168.1.2:5555       device product:klteuc model:SAMSUNG_SM_G900A device:klteatt



    ==>  send commands to a specific device

   a) first build APK from Android Studio
   b) find the APK file

   find . -name *apk
   ./app/build/outputs/apk
   ./app/build/outputs/apk/app-debug.apk


   c) install it on specific device, via

   adb -s 192.168.1.2:5555 install ./app/build/outputs/apk/app-debug.apk
   ./app/build/outputs/apk/app-debug.apk: 1 file pushed. 0.4 MB/s (1544402 bytes in 3.523s)
     pkg: /data/local/tmp/app-debug.apk
    Failure [INSTALL_FAILED_ALREADY_EXISTS]


    

    c-2) after deleting the existing apk file from device

    and install it again, it went to success


    adb -s 192.168.1.2:5555 install ./app/build/outputs/apk/activitiesCalling.apk
    ./app/build/outputs/apk/activitiesCalling.apk: 1 file pushed. 0.4 MB/s (1544402 bytes in 3.383s)
      pkg: /data/local/tmp/activitiesCalling.apk
      Success






    ==>  set port forwarding  (from local port to device port, vice versa)  ,  not tried, but in the doce 


  -->  Copy files from / to device

  adb pull "remote" "local"

  adb push "local"  "remote" 


  ==>  shell command


    adb -s 192.168.1.2:5555 shell ls -l
    drwxr-xr-x root     root              2014-03-30 03:40 acct




  ==> call "Activity Manager" (am)

    adb -s 192.168.1.2:5555 shell am start -a android.intent.action.VIEW
    Starting: Intent { act=android.intent.action.VIEW }


    NOTE, there was a small pop-up on PHONE !  (the activity)


        

   ==> call "Package Manager" (pm)

       adb -s 192.168.1.2:5555 shell pm uninstall com.iexpress.hello.oneactivityonpauserunsbeforeanotheractivityonresume
     Success

     after that, the APP got removed .


   ==> take snapshot 

       adb -s 192.168.1.2:5555 shell 
     shell@klteatt:/ $ screencap /sdcard/taken.from.adb.png
     shell@klteatt:/ $ ls /sdcard/taken*
     /sdcard/taken.from.adb.png
     shell@klteatt:/ $ ls -l /sdcard/taken*                                         
     -rwxrwx--- root     sdcard_r   397467 2017-08-02 00:38 taken.from.adb.png
     shell@klteatt:/ $ 



  ==> record video  (awesome stuff !)  <-- can we do this in background ?   this is a very hacking stuff

      adb -s 192.168.1.2:5555 shell

    screenrecord /sdcard/recorded.from.adb.mp4

    shell@klteatt:/ $ screenrecord /sdcard/recorded.from.adb.mp4
    ^Cshell@klteatt:/ $ ls -l /sdcard/record*
    -rwxrwx--- root     sdcard_r  4291147 2017-08-02 00:41 recorded.from.adb.mp4
    shell@klteatt:/ $


    --> get the recorded video local macbook pro,  and play here

    adb -s 192.168.1.2:5555 pull /sdcard/recorded.from.adb.mp4
    /sdcard/recorded.from.adb.mp4: 1 file pulled. 0.4 MB/s (4291147 bytes in 11.082s)



  ==> read ART (Android Runtime) for App

     Requires Android 7.0 (API level 24)

   <-- I have Android 5.1, hence not able to do it

    adb -s 192.168.1.2:5555 shell cmd package dump-profiles com.iexpress.hello.oneactivityonpauserunsbeforeanotheractivityonresume
    /system/bin/sh: cmd: not found



  ==>  other commands, 

     adb -s 192.168.1.2:5555 shell ls /system/bin     <--- check all commands


   adb -s 192.168.1.2:5555 shell dumpsys            <---  dump ALL android device stuff on local macbook pro screen !



  In Summary:  this (https://developer.android.com/studio/command-line/adb.html) is great for ADB !



8/2/17 (Wed) 

   TODO:  really want to build the tic-tac-toe 


8/6/17 (Sun) 

   1. still need to do the tic-tac-toe scheduled 8/2, 

   2. chapter 3,  3.5 - view scrolling conflits

    *)  parent container, once it gets events, it will handle all of them, will not pass to children containers.

    *)  

    <--  need to revisit, not even had the conflict; not into this subject right now.


   3. Chapter 4. view under the hood 

      ViewRoot,  DecorView ,  WindowManager 

    
    ViewRoot root = new ViewRootImpl(view.getContext(), display);
    root.setView(view, wparams, panelParentView);



      *) view rendering:   from ViewRoot::performTraversals() -> ::measure() -> ::layout() -> ::draw()    -->  drawing the view 

      *) DecorView :  


      *) MeasureSpec :  SpecMode, SpecSize 

          LayoutParams.MATCH_PARENT   
          LayoutParams.WRAP_CONTENT



    ViewGroup's measure conduct on its children views' measure 


    *) Layout :  setFrame set mLeft, mRight, mTop, and mBottom for View.


    *)  Draw:  
        background.draw(canvas)
        onDraw  (draw self)
        dispatchDraw (draw children)
        onDrawScrollBars



8/7/17 (Monday)

  1. Worked on "Self-defined-View" Page 63, Chapter 3, Book: Android from novice to expert - by Ming Ri Ke Ji - published 2012 in Chinese.
  2. Checked in the self-view android project at https://github.com/jwang1/androidSelfView


  3. GIT : 
   
     push new local project to GitHub :  
	   1) in local android project, make sure clean project (from Android Studio is fine)
	   2) git init
	   3) git add -all  (make sure some good .gitignore)
	   4) git commit -am 'init check in: project short description'
	   5) *** create a new repository from GitHub
	   6) git remote add origin https://.....
	   7) git push -u origin master

	   8) --> reference : https://help.github.com/articles/adding-an-existing-project-to-github-using-the-command-line/


  4. TODO: 

  	 do the project on page 115 - from the book :  Android from novice to expert .

	 also need to do the tic-tac-toe


8/8/17 (Tue)

  1. Did the small project on page 115 - from the book: Android from novice to expert

     a couple of bugs, not checked in code yet.


8/10/17 (Thr) 

  1. Yesterday, did improved the code created on 8/8/17;  
  2. Improved more on this find-egg-with-chick game, 
  3. Uploaded it to GitHub : https://github.com/jwang1/androidTableLayoutImageViewFindChickInEgg
  4. Added thoughts, description for the design, implementation, and algorithm of this game.  
  5. Discussed with XL about it, and got the idea of improving the randomization algorithm, make it o(1), instead of current o(n) - looping over the image array.


  6.  TODO:  improve the algorithm, and then continue the tic-tac-toe project.



8/11 ~ 8/15 (all these days including Saturday and Sunday,  working on company stuff, metro code improvement, 
  draw all the stuff on the whiteboard
  1. algorithm
  2. implementation notes 
  3. walkthrough example

  <-- more like reverse-engineering;  good way may be:
  walkthrough -> algorithm -> implementation


8/15/17 (Tue) 

  1. trying android internationalization;  moving text to resource string.xml.


8/21/17 (Mon)

  1. Added I18N for "Hatch Egg" game.

  2. TODO:  Add descriptions for this app, so that when users search "Google Plays", they will get some ideas about what this game 
            is about, who are the idea players, what ages would be, and a little bit things in "About" developer 
			(a4a - automation for all; automation for a...) 



			How about we collect some downloads?   Perhaps "Google Play" can do that.

			And then, get an account, publish it first.


  3. TODO:  Add the Ads part,  and the AI ads ...  based on user's interests.




