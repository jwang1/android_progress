
7/16/2017 (Sunday) 


	Android's :  Activity ,  Service ,  Receiver , ContentProvider


1. Chapter 1 (Activity)

   onCreate -> onStart -> onResume -> run -> onPause -> onStop -> onRestart (back to onStart) or onDestroy (go to destroy)


   My take on these:  onStart (not necessary showing the activity on screen yet);  onResume can show  (need to come back to revisit it)


   TODO:  need to write that Demo, to show 2 activities sequence ...

       
	   Completed it on 7/22/17 (Sat) https://github.com/jwang1/onPauseCalledBeforeAnotherActivityOnResume


7/20/17 (Thursday)

1. revisit Activity

   think of activity on the phone :   onCreate -- the activity is in mem and CPU now;   onStart -- the activity is warming up, but not visible yet;   onResume -- the activity is on screen now.



    so,  "onStart" vs "onResume" :  onResume activity is on Screen;  but onStart is not yet, almost there.    Think of the phone :  memory,  back of display, front of display  ---  |->|->|   so, onCreate (on memory), onStart (back of screen), onResume (front display) ...


   	1.1  onPause of an Activity must be executed, before another activity's onResume ...

	1.2  when user's back to previous activity:  onRestart -> onStart -> onResume  executed

	1.3  when user switch to home or another activity;  previous activity's onPause -> onStop executed .

	1.4  when user click "back" soft button;  onPause -> onStop -> onDestroy

	1.5  should NOT do heavy work in onPause, because the next Activity's onResume cannot start until previous Activity's onPause completes


7/21/17 (Friday)

TODO:  

  *) Chapter 1, P6  example, how to make 2 activities swap, ie, one activity goes out, and the other comes in, to show the 1st activity's onPause is called before 2nd activity's onResume .

      "how to" part,  perhaps create 2 apps ?   or, can we have 2 activities in one app, and do the switch ? <--  should be, for instance : 
	    a) create one activity with all todo list
		b) once click a todo item, go to the Details of the item.

	Did this before when creating the Movie review app, forgot it now,   <== Completed this on Saturday, in one App, created 2 activites (like Todo List;  and todoItem  two activities; and use Intent to startActivity;  and added onPause and onResume overrided methods simply for comments)


	***   Completed it on 7/22/17 (Sat) https://github.com/jwang1/onPauseCalledBeforeAnotherActivityOnResume


7/22/17 (Saturday)

  1. working on TODOs from 7/21

  2. About Activities Priorities :  Activity showing on screen and user can interact with it  -->  Activity on front but not able to interact with users (for instance, the activitiy is front, but it has a dialog up, hence, user cannot interact with the activity, but the dialog)   -->  Activity not on screen 

  3.  Activity Priorities :  activites killed when out of resources

  4.  Activity LaunchMode !  --- important topic

		standard

		singleTop

		singleTask

		singleInstance



 5.  IntentFilter  matching ...

       action matching

	   category matching

	   data matching



7/22/17 (Satureday)

 Chapter 2 : IPC

 1. Binder


 2. Socket


 3. android:process

    *) can only be defined from Manifest file;

	*) process-name starts with  ':' character, means 'private process'

	                       not start ':',  means the 'shared process' 

    *) SHARED DATA !!!

	   the threading-synchronized may not working in processes-shared-data ...

		
	
		Inter-Process mechanism : 

			a) Intent passing data

			b) shared files

			c) SharedPreferences

			d) Binder Messenger

			e) AIDL

			f) Socket  (the Kernel level, Linux sys) and ...

			g) old days: I tried Pipe, socket, almost the shared memory (but just stopped at the analysis)


		Data-passing:

		    a) serializable

				serialVersionUID --   if old objection has value 1L ;   the new class has value 2L,  and then,  (Serialized-Class) ObjectInputStream(FileInputStream("serialized-obj"))  will not work.


				if not set serialVersionUID in the class, deserialization will calculate hashCode from the object, and assign it to serialVersionUID.  Now, if class's new field or field-deleted, the hashCode will be different for the obj serialized before class change which also not serialVersionUID set.   Then, the deserialization going to fail.


			b) Parcelable

			c) Binder

 4. android:thread





