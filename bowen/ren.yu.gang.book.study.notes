
7/16/2017 (Sunday) 


  Android's :  Activity ,  Service ,  Receiver , ContentProvider


1. Chapter 1 (Activity)

   onCreate -> onStart -> onResume -> run -> onPause -> onStop -> onRestart (back to onStart) or onDestroy (go to destroy)


   My take on these:  onStart (not necessary showing the activity on screen yet);  onResume can show  (need to come back to revisit it)


   TODO:  need to write that Demo, to show 2 activities sequence ...

       
     Completed it on 7/22/17 (Sat) https://github.com/jwang1/onPauseCalledBeforeAnotherActivityOnResume


7/20/17 (Thursday)

1. revisit Activity

   think of activity on the phone :   onCreate -- the activity is in mem and CPU now;   onStart -- the activity is warming up, but not visible yet;   onResume -- the activity is on screen now.



    so,  "onStart" vs "onResume" :  onResume activity is on Screen;  but onStart is not yet, almost there.    Think of the phone :  memory,  back of display, front of display  ---  |->|->|   so, onCreate (on memory), onStart (back of screen), onResume (front display) ...


  1.1  onPause of an Activity must be executed, before another activity's onResume ...

  1.2  when user's back to previous activity:  onRestart -> onStart -> onResume  executed

  1.3  when user switch to home or another activity;  previous activity's onPause -> onStop executed .

  1.4  when user click "back" soft button;  onPause -> onStop -> onDestroy

  1.5  should NOT do heavy work in onPause, because the next Activity's onResume cannot start until previous Activity's onPause completes


7/21/17 (Friday)

TODO:  

  *) Chapter 1, P6  example, how to make 2 activities swap, ie, one activity goes out, and the other comes in, to show the 1st activity's onPause is called before 2nd activity's onResume .

      "how to" part,  perhaps create 2 apps ?   or, can we have 2 activities in one app, and do the switch ? <--  should be, for instance : 
      a) create one activity with all todo list
    b) once click a todo item, go to the Details of the item.

  Did this before when creating the Movie review app, forgot it now,   <== Completed this on Saturday, in one App, created 2 activites (like Todo List;  and todoItem  two activities; and use Intent to startActivity;  and added onPause and onResume overrided methods simply for comments)


  ***   Completed it on 7/22/17 (Sat) https://github.com/jwang1/onPauseCalledBeforeAnotherActivityOnResume


7/22/17 (Saturday)

  1. working on TODOs from 7/21

  2. About Activities Priorities :  Activity showing on screen and user can interact with it  -->  Activity on front but not able to interact with users (for instance, the activitiy is front, but it has a dialog up, hence, user cannot interact with the activity, but the dialog)   -->  Activity not on screen 

  3.  Activity Priorities :  activites killed when out of resources

  4.  Activity LaunchMode !  --- important topic

    standard

    singleTop

    singleTask

    singleInstance



 5.  IntentFilter  matching ...

     action matching

     category matching

     data matching



7/22/17 (Satureday)

 Chapter 2 : IPC

 1. Binder


 2. Socket


 3. android:process

    *) can only be defined from Manifest file;

  *) process-name starts with  ':' character, means 'private process'

                  not start ':',  means the 'shared process' 

    *) SHARED DATA !!!

     the threading-synchronized may not working in processes-shared-data ...

    
  
    Inter-Process mechanism : 

      a) Intent passing data

      b) shared files

      c) SharedPreferences

      d) Binder Messenger

      e) AIDL

      -) ContentProvider

      f) Socket  (the Kernel level, Linux sys) and ...

      g) old days: I tried Pipe, socket, almost the shared memory (but just stopped at the analysis)


    Data-passing:

        a) serializable

        serialVersionUID --   if old objection has value 1L ;   the new class has value 2L,  and then,  (Serialized-Class) ObjectInputStream(FileInputStream("serialized-obj"))  will not work.


        if not set serialVersionUID in the class, deserialization will calculate hashCode from the object, and assign it to serialVersionUID.  Now, if class's new field or field-deleted, the hashCode will be different for the obj serialized before class change which also not serialVersionUID set.   Then, the deserialization going to fail.


      b) Parcelable

         In android apps, use Parcelable is better than Serializable; usage wise Parcelable is a little more typings; but i/o expense is small, and faster.



      c) Binder  <--- Chapter 2 (p52)

          *)  AIDL (Android Interface Definition Language ? )  -  also uses package, but still different from existing other Java classes.

              describe the interface methods (similar to RMI's methods? webmethods ? )  getBookList  and addBook defined in IBookManager.aidl

          *)  auto generated coe IBookManager.java from IBookManager.aidl file

              IBookManager includes Stub class which is used for anything transmit in the same process
                                    Proxy class for transmit in Different Processes.

          

              in case of two processes communication (IPC) using Binder;  the flow (cycle):

                   Client -> Binder -> Service (onTransact) -> thread-pool -> reply -> Binder -> Client


          *)  we can write Binder without AIDL file;  the AIDL file is used to generate Binder class.

                note the android.os.IInterface  

                         IBinder::transact


          *) Binder death (remote side terminated)   -- set some callback to notify service so that it can handle Binder death.

              IBinder::linkToDeath   IBinder::unlinkToDeath 



      d) Sharing with files :   process-1 writes to a file;   and process-2 reads from that file.


             now, if both write to the file, the shared-file can be problem .



      e) SharedPreferences

            data saved in /data/data/package-name/shared_prefs  directory

            the data can be lost, not recommended for IPC data sharing.



      f) Messenger

          it's built on AIDL, light-weight IPC :

            i. service layer :  MessengerService extends Service
            ii. client side  :  MessengerHandler extends Handler


      g) AIDL 

            supports :  primirary types (int, long, char, boolean, double etc)
                        String and CharSequence
                        List (only ArrayList and all its elements have to be supported by AIDL)
                        Map (only HashMap and all its elements have to be supported by AIDL)
                        Parcelable  (any objs implements Parcelable interface)
                        AIDL 


            



        binder pool 

          Binder mBinderPool = new BinderPool.BinderpoolImpl();



  *) ContentProvider (built on top of Binder)


  *) Socket 


    need permissions

    <uses-permission android:name="android.permission.INTERNET" />
    <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />


    TcpServer -  
    
      svrSckt = new ServerSocket(18001);

      final Socket client = svrSckt.accept();

      new Thread() { 
        @Override
        public void run() {
          responseClient(client);
        }
      }.start();

      void responseClient(Socket sckt) {
        .
        .
        .
      }





 4. android:thread


 7/27/17 (Thr) -  P121 ICP comparison -  

   bundler vs Shared-file vs AIDL vs Messenger vs ContentProvider vs Socket 

  
    BinderPool 



7/31/17 (Monday) 

   *) Completed reading "Android from scratch to master" -

      there are some good stuff, the structure is very clear, and learned quite a lot;  

    worth of reading again;  and the Final Project is good.



   *) watched 李宏毅's ML,  the 2'51" of https://www.youtube.com/watch?v=IzHoNwlCGnE&list=PLJV_el3uVTsPMxPbjeX7PicgWbY7F8wW9 is very helpful,

       watched "https://www.youtube.com/watch?v=IzHoNwlCGnE&list=PLJV_el3uVTsPMxPbjeX7PicgWbY7F8wW9"  (brief introduction of Deep Learning - very helpful on concept ,  history, simple, slow are better)

     watched "https://www.youtube.com/watch?v=FrKWiRv254g&list=PLJV_el3uVTsPy9oCRY30oBPNLCo89yu49&index=10" (CNN - Convolutional Neuro network) it's good, clearly explained CNN

     ==> TODO:  to watch the 2 videos of RNN (Recurrant Neuro Network)  --- links from Mr's Li's channel !



8/1/17 (Tue) 

View and event handling

  when an event raised, it goes through 
          Activity->Window->View 

  If view's onTouchEvent returns "false", ie, not handling such event, and then it will bubble up to Window, if still not handled, and then bubble up to Activity to be handled.  (similar to emergency handling, worker handles it first, if not able to, and then pass up to supervisor...) 


    1. one touch event, 

     *)  boolean dispatchTouchEvent(MotionEvent ev)

           "dispatch", if event dispatched to current-View, this method is called; and returns current-View's onTouchEvent and child view's dispatchTouchEvent method's value.

     *)  boolean onInterceptTouchEvent(MotionEvent ev)

           "used inside view's dispatchTouchEvent method - ie the above one", 

     *) boolean onTouchEvent(MotionEvent ev)


        used in dispatchTouchEvent method; used to handle that event, 


  In summary, 

    public boolean dispatchTouchEvent(MotionEvent ev) {
      boolean consume = false;

      if (onInterceptTouchEvent(ev)) {
        consume = onTouchEvent(ev);
      } else {
        consume = child.dispatchTouchEvent(ev);    // notice the child 
      }

      return consume;

    }



  
  2. the other book "Android from novice to master",  chapter 2, re-visit

      "ADB"  -- Android Debug Bridge   


         Goals / Motivations :   1) under the hood,  2) automation / batch processing -- kind like the Tomcat script auto dispatching


      adb devices   (after phone set usb debug, https://developer.android.com/studio/command-line/adb.html,  and connected to phone, and after brew install adb -- check google;   and now showed the physical phone connected via adb !)

    note, not checked android_sdk/platform-tools yet ...


  ==>  if adb NOT working, it's good to restart adb server

      adb kill-server


    ==>  The Wi-Fi connect (adb) is very useful (way of setting is also documented above)

  :build-tools $ adb tcpip 5555
  restarting in TCP mode port: 5555
  :build-tools $ adb connect 192.168.1.2
  connected to 192.168.1.2:5555
  :build-tools $ 


  --> verifying:

  adb devices
  List of devices attached
  192.168.1.2:5555  device


    --> Query for device
  adb devices -l
   
    192.168.1.2:5555       device product:klteuc model:SAMSUNG_SM_G900A device:klteatt



    ==>  send commands to a specific device

   a) first build APK from Android Studio
   b) find the APK file

   find . -name *apk
   ./app/build/outputs/apk
   ./app/build/outputs/apk/app-debug.apk


   c) install it on specific device, via

   adb -s 192.168.1.2:5555 install ./app/build/outputs/apk/app-debug.apk
   ./app/build/outputs/apk/app-debug.apk: 1 file pushed. 0.4 MB/s (1544402 bytes in 3.523s)
     pkg: /data/local/tmp/app-debug.apk
    Failure [INSTALL_FAILED_ALREADY_EXISTS]


    

    c-2) after deleting the existing apk file from device

    and install it again, it went to success


    adb -s 192.168.1.2:5555 install ./app/build/outputs/apk/activitiesCalling.apk
    ./app/build/outputs/apk/activitiesCalling.apk: 1 file pushed. 0.4 MB/s (1544402 bytes in 3.383s)
      pkg: /data/local/tmp/activitiesCalling.apk
      Success






    ==>  set port forwarding  (from local port to device port, vice versa)  ,  not tried, but in the doce 


  -->  Copy files from / to device

  adb pull "remote" "local"

  adb push "local"  "remote" 


  ==>  shell command


    adb -s 192.168.1.2:5555 shell ls -l
    drwxr-xr-x root     root              2014-03-30 03:40 acct




  ==> call "Activity Manager" (am)

    adb -s 192.168.1.2:5555 shell am start -a android.intent.action.VIEW
    Starting: Intent { act=android.intent.action.VIEW }


    NOTE, there was a small pop-up on PHONE !  (the activity)


        

   ==> call "Package Manager" (pm)

       adb -s 192.168.1.2:5555 shell pm uninstall com.iexpress.hello.oneactivityonpauserunsbeforeanotheractivityonresume
     Success

     after that, the APP got removed .


   ==> take snapshot 

       adb -s 192.168.1.2:5555 shell 
     shell@klteatt:/ $ screencap /sdcard/taken.from.adb.png
     shell@klteatt:/ $ ls /sdcard/taken*
     /sdcard/taken.from.adb.png
     shell@klteatt:/ $ ls -l /sdcard/taken*                                         
     -rwxrwx--- root     sdcard_r   397467 2017-08-02 00:38 taken.from.adb.png
     shell@klteatt:/ $ 



  ==> record video  (awesome stuff !)  <-- can we do this in background ?   this is a very hacking stuff

      adb -s 192.168.1.2:5555 shell

    screenrecord /sdcard/recorded.from.adb.mp4

    shell@klteatt:/ $ screenrecord /sdcard/recorded.from.adb.mp4
    ^Cshell@klteatt:/ $ ls -l /sdcard/record*
    -rwxrwx--- root     sdcard_r  4291147 2017-08-02 00:41 recorded.from.adb.mp4
    shell@klteatt:/ $


    --> get the recorded video local macbook pro,  and play here

    adb -s 192.168.1.2:5555 pull /sdcard/recorded.from.adb.mp4
    /sdcard/recorded.from.adb.mp4: 1 file pulled. 0.4 MB/s (4291147 bytes in 11.082s)



  ==> read ART (Android Runtime) for App

     Requires Android 7.0 (API level 24)

   <-- I have Android 5.1, hence not able to do it

    adb -s 192.168.1.2:5555 shell cmd package dump-profiles com.iexpress.hello.oneactivityonpauserunsbeforeanotheractivityonresume
    /system/bin/sh: cmd: not found



  ==>  other commands, 

     adb -s 192.168.1.2:5555 shell ls /system/bin     <--- check all commands


   adb -s 192.168.1.2:5555 shell dumpsys            <---  dump ALL android device stuff on local macbook pro screen !



  In Summary:  this (https://developer.android.com/studio/command-line/adb.html) is great for ADB !



8/2/17 (Wed) 

   TODO:  really want to build the tic-tac-toe 


8/6/17 (Sun) 

   1. still need to do the tic-tac-toe scheduled 8/2, 

   2. chapter 3,  3.5 - view scrolling conflits

    *)  parent container, once it gets events, it will handle all of them, will not pass to children containers.

    *)  

    <--  need to revisit, not even had the conflict; not into this subject right now.


   3. Chapter 4. view under the hood 

      ViewRoot,  DecorView ,  WindowManager 

    
    ViewRoot root = new ViewRootImpl(view.getContext(), display);
    root.setView(view, wparams, panelParentView);



      *) view rendering:   from ViewRoot::performTraversals() -> ::measure() -> ::layout() -> ::draw()    -->  drawing the view 

      *) DecorView :  


      *) MeasureSpec :  SpecMode, SpecSize 

          LayoutParams.MATCH_PARENT   
          LayoutParams.WRAP_CONTENT



    ViewGroup's measure conduct on its children views' measure 


    *) Layout :  setFrame set mLeft, mRight, mTop, and mBottom for View.


    *)  Draw:  
        background.draw(canvas)
        onDraw  (draw self)
        dispatchDraw (draw children)
        onDrawScrollBars



8/7/17 (Monday)

  1. Worked on "Self-defined-View" Page 63, Chapter 3, Book: Android from novice to expert - by Ming Ri Ke Ji - published 2012 in Chinese.
  2. Checked in the self-view android project at https://github.com/jwang1/androidSelfView


  3. GIT : 
   
     push new local project to GitHub :  
	   1) in local android project, make sure clean project (from Android Studio is fine)
	   2) git init
	   3) git add -all  (make sure some good .gitignore)
	   4) git commit -am 'init check in: project short description'
	   5) *** create a new repository from GitHub
	   6) git remote add origin https://.....
	   7) git push -u origin master

	   8) --> reference : https://help.github.com/articles/adding-an-existing-project-to-github-using-the-command-line/


  4. TODO: 

  	 do the project on page 115 - from the book :  Android from novice to expert .

	 also need to do the tic-tac-toe


8/8/17 (Tue)

  1. Did the small project on page 115 - from the book: Android from novice to expert

     a couple of bugs, not checked in code yet.


8/10/17 (Thr) 

  1. Yesterday, did improved the code created on 8/8/17;  
  2. Improved more on this find-egg-with-chick game, 
  3. Uploaded it to GitHub : https://github.com/jwang1/androidTableLayoutImageViewFindChickInEgg
  4. Added thoughts, description for the design, implementation, and algorithm of this game.  
  5. Discussed with XL about it, and got the idea of improving the randomization algorithm, make it o(1), instead of current o(n) - looping over the image array.


  6.  TODO:  improve the algorithm, and then continue the tic-tac-toe project.



8/11 ~ 8/15 (all these days including Saturday and Sunday,  working on company stuff, metro code improvement, 
  draw all the stuff on the whiteboard
  1. algorithm
  2. implementation notes 
  3. walkthrough example

  <-- more like reverse-engineering;  good way may be:
  walkthrough -> algorithm -> implementation


8/15/17 (Tue) 

  1. trying android internationalization;  moving text to resource string.xml.


8/21/17 (Mon)

  1. Added I18N for "Hatch Egg" game.

  2. TODO:  Add descriptions for this app, so that when users search "Google Plays", they will get some ideas about what this game 
            is about, who are the idea players, what ages would be, and a little bit things in "About" developer 
			(a4a - automation for all; automation for a...) 



			How about we collect some downloads?   Perhaps "Google Play" can do that.

			And then, get an account, publish it first.


  3. TODO:  Add the Ads part,  and the AI ads ...  based on user's interests.


8/27/17 (Sun)

  1. ToDo:  still need to publish the app

  2.        one thing to do, is to make a scoreboard, and a flash pop-up, for the score/game, and total
            regarding the score board, let's never deduct points;  and make the points 150 per win / correct guess.
			so, we can tell how much the user played.  

  3.	    where to save the total score ?  



9/2/17 (Sat)

  1. Kotlin notes:  when "Kotlin in Action" book came  --  
  
  the feeling is:  Kotlin is just Java in C#,  like C# in Java at the beginning.  (p5, "type inference"  :  val x = 1) 

  Kotlin Compiler :  written in Java and Kotlin, and moving toward more Kotlin;  it is opensource?  GitHub https://github.com/JetBrains/kotlin

    
	 a) http://try.kotl.in    (try Kotlin online)

	    or 

		https://try.kotlinlang.org/#/Examples/Hello,%20world!/Simplest%20version/Simplest%20version.kt

	 b) official Kotlin forumns :  https://discuss.kotlinlang.org

	 c) slack chat:   http://kotlinlang.slack.com

	 d) Kotlin tag on stack overflow:   http://stackoverflow.com/questions/tagged/kotlin

	 e) Kotlin Reddit :  www.reddit.com/r/Kotlin




  2. Compiling Kotlin code

     kotlinc <source file or dir> -include-runtime -d <jar name> 

	 execute code

	 java -jar <jar name> 




  3. programming language

     statement vs expression

	   expression - has a value; can be part of another expression.  In Kotlin,  if (a > b) is an expression,  has value;  but in Java, it is just a statement .

	   statement  - not having value,



  4. Kotlin special :

     val  - Immutable reference;  cannot be re-assigned after initialization;  corresponding to Java's final variable
	 var  - mutable reference; can be re-assigned after initialization

     string template (p22) -  borrowed Unix shell scripting syntax:   "hello, $name"   -- here $name will be evaluated
	       - it is called template, sth like Velocity template;  Front-end mustasche (html with mustasche template, evaluating)


     classes, Properties  (this is more like C# stuff, where C# evolved from Java,  the Java getter and setter really .... just ... ;  and the reason Java did not change to C#'s properties, was simple ?....   not want to be "famed" as copying C# ?)

	 "var"  stuff is another C# evolvement from Java  



     Kotlin:  can put Multiple classes in one file, and choose any name for that file.

	          it is still good to stick to Java package and class file structure, so that easier for Java+Kotlin mixing project;  

			  but ?    would that be another bad thing like Java's Generic (to backward compatible, sacrifized generic types - using the type erasure - compile time;  really causing much Java Generic ....) 



     enum class :    Kotlin has to use both words; because enum has special meaning in Kotlin.



     switch can be on "enum class", also objects, or setOf, or more ... ;   Java's NOT to change such a way,  (or, those 1996 Java stuff prevent such changes from happening...)  

	
	 "when" keyword is good practice, perhaps some features from other programming lang I did not know.



     combining "type checks" and "casting"


	 "is"  compared to Java's instanceof  



    for (in in 100 downTo 1 step 2) {
	  ...
	}




9/3/17 (Sun) 

  1. ToDo:   need to re-read Mr. Ren's original blog, to get back,  was distracted by heavy after hour company projects tasks for several weeks.

  2. Reading Hu She’s “The Yang Du She” 

     2.1  Mr Hu’s  :   “Yan Dao:  read carefully”,  “Kou Dao: read aloud”,  “Xin Dao: think aloud”,  “Shou Dao:  check dict, take notes,  my extension to that - write down words on the same objects”.

     2.2  Mr Jiang Wen Yu :

          2.2.1   read the stuff close to what you’re doing now (for work, progress, or…)
                  this is similar to Mr Buffett’s theory of checking out 12 books on the same subject, and read them all, you will be good at it, and then just practice them over and over agin;  
                  also, similar to the programming langs;  broad interests are not the problem;  but the problem is that we have limit TIME, and RESOURCE, (like watering seed, not seeds, find a seed to water, and until it grout and grow plants);   and after that, we can extend the same (using the left over water, if lucky) to pursue the next INTEREST.   So, currently, Java, Enterprise, the Mobile programming, but Machine Learning!   

                  Now, the kid’s progress

          2.2.2   finish them (by highly focusing) in time

          2.2.3   write own editorial, or own programs, by using what we read/learned from the books selectively read !   Like Mr. Buffett’s on horse racing reading.



   3. Kotlin continued:

      3.1 @JvmOverloads  - instructs Kotlin compiler to generate Java overloaded methods, 

	  3.2 "open" - Kotlin defaults class and methods are default by "final";  while Java default by "open" - class can be inherited 
	         - Kotlin's abstract method of abstract class ;   both are always "open", hence, no need to explicitly use "open" key word, but they need "abstract" keyword. 

	     the relationship:

		 "final"     cannot be overridden
		 "open"      can be overridden
		 "abstract"  must be overridden
		 "override"  Overrides a memeber in superclass or interface;  overridden member is open by default, if not marked "final"



      3.3 "visibility modifier" :  public by default in Kotlin  (but in Java, the default is "package" access...)
	    
		                      Kotlin has not "package" usage;  but it has "internal" - meaning "visible inside a module - an IntelliJ concept"  

		 "public (default"   visible everywhere
		 "internal"          visible in a "module" - IntelliJ stuff (that is beyond "package" level -  but not "project" level)
		 "protected"         visible in subclasses
		 "private"           visible in a class only


		 public/protected/private modifiers in Kotlin are preserved when compiling to Java bytecode.  


		 in Java, no way to define "private" class;  the default is package-private level (need to understand more on this)

		 Kotlin's "internal" will be "public" in Bytecode for JVM.

		 In Kotlin, "outer" class doesn't see "private" members of its "inner" (or nested) classes in Kotlin.



     3.4 "inner and nested classes" :  nested by default



9/5/17 (Mon, Labor Day) 

     1.  Continue "Kotlin" 


	   1.1 Functions and classes


	     "sealed" class,   cannot be inherited?

		 "primary c-tor,  and initializer blocks inside c-tor"  

		 "compiler-generated methods:  data classes and class delegation" 

		      "=="  so, Kotlin get this "operator overloading" for Object comparisons

			  "HashCode()"  :  Hash containers,


		"Data classes" :  just another way of saying "DTO",  "BO" (business object),  "DAO" (data access object) <-- this is more on db access.


	
		"class delegation", using "by" keyword, 

		    --> whenever implementing an interface, we're "delegating" the implementation of the interface to another object!

			for example:

			    class DelegatingCollection<T> (
				   innerList: Collection<T> = ArrayList<T>()
				) : Collection<T> by innerList {
				    ...
				}

			notice "by" above, other methods of that interface will be autogenerated via Kotlin Compiler.

			here "delegation" means, interface's impl is delegated to ...



		"object" keyword;  declaring a singleton, an easy way,  with class definition



		"companion" keyword usage:  --- Need to revisit ,  not concentrate when reading it.

          "classes in Kotlin cannot have static memebers" ,  Kotlin relies on package-level functions . 
		     "top-level" functions are recommended, but they cannot access class' private members; 

			 companion objects (deonoted by "companion" keyword) 



		"annonymous inner classes"  
		    a) Java's annonymous inner class can only extend 1 class or implement 1 interface;
			b) Kotlin's can implement multiple or none interfaces.


        

		1.2.  Lambdas and Collections

		     
		    



	 2.  "Ze Yang Du Shu" - by Jian Wen Yu

	     2.1.  Reading --> for better characteristics
		 2.2.  Good humman -->  a) nice personalities;  b) solid knowledge;  and  c) agile problems solving, situations handling

		 2.3.  Books -- 2 types:  written materials,  and anythings (wisdom) not written down (even by observing natures) 
		 2.4.  a) reading books;  b) learn from idols  ;   c) observe surroundings carefully;  d) REFLECT, and CRITICAL THINKING 

		 2.5.  Reading what we need at the moment
		 2.6.  Finish it within TIME
		 2.7.  Read intensively, and others extensively, 
		 2.8.  CRITICAL THINKING,  -->   form own knowledge and wisdom after reading/learning from others  ;  
		           some applies to PROGRAMMING, or AI learning.

		 2.9.  ^^^  the above, ACTION.


9/5/17 (Tue) -

  1. Kotlin

     1.1  Lambdas and Collections


9/9/17 (Sat) - 

  1. Kotlin
    
	 1.1 Kotlin with high order functions

	    1.1.1  "inline" functions, compiler will replace every call to the function with "actual code implementing that function".  - similar to C macro or typedef in C++ .

	 1.2 Kotlin with Generics - almost same as Java's ;  compile-time generics, erased after compilation; no generics-available-at-run-times;

	     Note, for Python, dynamic programming lang,  itself is a generic type programming, using "duck type";  when programmers 
		    coded the function / class,  having the specific "type" in mind,  and at runtime, that type is assumed existed.


	   
9/17/17 (Sun) 

  1. trying to get into Python, because deep learning stuff really needs the interactive scripting (python) used a lot

  2. Python Applications Programming  (3rd Edition) - Wesley J. Chun

  ***chapter 1.  Regular Expression

    2.1  "re" module aligns to Perl regex.
	2.2  match(...)
	2.3  search(...)

    2.4  RegEx "groups";  the following, 2 parenthese; 2 sub-groups.
	
	     m = re.match('(\w\w\w)-(\d\d\d)', 'abc-123')

	     m.groups()
		 
		 m.group()
		 m.group(0)
		 m.group(1)
		 m.group(2)
		 m.group(3) <===  no such group;  index out of bound


		 two sub-groups

		 m = re.match('(a(b))', 'ab')

		 m.groups()



    2.5  RegEx findall vs finditer

	     s = 'This and that'

		 re.findall(r'(th\w+) (th\w+)', s, re.I)		# re.I  flag to ignore cases; case incensitive

		 # finditer ,  can use __next__() to iterate  - note, python-2 just next(); but python-3 changed.
		 #     as shown in https://stackoverflow.com/questions/1073396/is-generator-next-visible-in-python-3-0 
		 #        Special methods like __init__() and __del__ all have double underscores 


		 re.finditer(r'(th\w+) (th\w+)', s, re.I).__next__().groups()   # returns   ('That', 'this')


    2.6  sub() and subn() 

	    re.sub('X', 'Mr. Perf', 'attn: X\n\nDear X\n')


	    re.subn('X', 'Mr. Perf', 'attn: X\n\nDear X\n')   # will return number of substitutes ...


    2.7  \N   - group number N

	    # here is how to swap the mm with dd 

		re.sub(r'(\d{1,2})/(\d{1,2}/(\d{2}|\d{4})',  r'\2/\1/\3',  '2/20/91')   # returns  20/2/91




9/18/17 (Mon) 

  1. Quickly scanned "JavaScript Application Design" - Nicolas Bevacqua 
    
	   It's a book on several JavaScripts Libraries :  Grunt, NodeJS, a little Less, CommonJS, RequireJS, callbacks -> PromiseJS, Testing, and REST ...;  

	   did mention some stuff on deployment, 


  2. Back to Python study:

    2.1  Welsley J Chun's book P16 

	     "extension notation" :   Look ahead,  or look behind   

		 (?= (?:\d{5}|[A-Z]{2}))


		 a)  (?:\w+\.)*    ---  string that end with a dot, and such matches are neither saved for use nor retrieval later.

		 b)  (?#comment)   ---  No matching here, just commenting

		 c)  (?=.com)      ---  only do a match if ".com" follows, do not consume any of the target string.

		 d)  (?!.net)      ---  only do a match if ".net" does NOT follow.

		 e)  (?<=800-)     ---  only do a match if string is preceded by "800-", presumably for phone numbers; and do NOT consume the input string.

		 f)  (?<!192\.168\.) --- only do a match if string is NOT preceded by "192.168.", presumably to filter out a group of class c IP addresses.

		 g)  (?(1)y|x)      ---  if a matched group 1 (\1) exists, match against y;  otherwise, match agains x



		 so,  the above (?= (?:\d{5}|[A-Z]{2})) ---  uses item a, c .

		    so, in plain English, the above means,  for any string, starting with a space, followed by 5-digits, or followed by 2-uppercase-letters.
			that is,  " CA",  " 94023", 


    2.2  split()

	     re.split(', |(?= (?:\d{5}|[A-Z]{2}))',  'Mountain View, CA 94040')   # creates  ('Mountain View', 'CA', '94040')


9/30 (Sat) 
 
  1.  Python Applications Programming - Welsley J. Chun 

    1.1 P31 Extension Notations  (?...)
	    
      1.1.1  (?i)    <-- ignore cases

		re.findall(r'(?i)yes',  'yes? Yes. YES!!!')  


      1.1.2  (?m)    <-- multiple lines

	    re.findall(r'(?im)(^th[\w ]+)', """
		    This line is the first.
			another line,
			that line, it's the best
			""")


		the above returned  ['This line is the first', 'that line']      <== note the symbols are not included



      1.1.3 (?s)   <-- indicate dot (.) can represnet \n character;  usually such dot (.) represents all-chars exception \n

	     re.findall(r'(th.+)', '''
		    This line is the first
			this is second
			this is third
			''')

		returns ['this is seond', 'this is third']


		now,  notice the (?s)

		re.findall(r'(?s)(th.+)', """
		    This line is first
			this is second
			this is third
			''')

		returns ['this is second\nthis is third\n']     <-- since the match includes \n ;   there is 1 result, instead of 2.


	 1.1.4 (?x)  <-- lets users create more human-readable regex, by suppressing whitespace characters within regexes (except those in character classes or those that are backslack-escaped).   Also, has/comment/octothorpe symbols (#) can also be used to start a comment, as long as they're not within a character class backslash-escaped.


      
    Verbose


	    re.search(r'''(?x)
		    \((\d{3})\)      # area code
			[ ]              # space ;   note, this white space in [] is NOT escaped, counted in regex; but, spaces between ] and #  are supprsessed.
            (\d{3})          # prefix
			-                # dash
			(\d}{4})         # endpoint numbers
			''',  '(860) 555-1234').groups()

	    returns ['860', '555', '1212']     <--  note the above is looking for groups()


    1.1.5 (?:)   <--  lets users to "GROUP" parts of regex, but does NOT save them for future retrieval or use.  It's handy when you donot want superfluous matches that are saved and never used!

	    re.findall(r'http://(?:\w+\.)*(\w+\.com)', 
		    'http://google.com http://www.google.com http://code.google.com')

		returns ['http://google.com', 'http://www.google.com', 'http://code.google.com']


   1.1.6  (?P<name>)  and (?P=name)     <-- the formal saves matches by using a name id, rather than using increasing numbers - starting from 1 to N  - which is retrieved later by using \1, \2, ..., \N.

     similar to C# and Kotlin's named-parameters ,  vs  positional-parameters 

	     re.sub(r'\((?P<areacode>\d{3})\) (?P<prefix>\d{3})-(?:\d{4})',
		     '(\g<areacode>) \g<prefix>-xxxx', '(880) 555-2312')

		returns   ['(880) 555-xxxx']      <--  note the above used named-parameters, also used (?:) do not remember that-Group because the group not used later.



    Another example: 


	   bool(re.match(r'''(?x)

	     # match (800) 555-1212, save areacode, prefix, number
		 \((?P<areacode>\d{3})\) (?P<prefix>\d{3})-(?P<number>\d{4})

		 # space
		 [ ]

		 # match 800-555-1212
		 (?P=areacode)-(?p=prefix)-(?P=number)

		 # space
		 [ ]

		 # match 18005551212
		 1(?P=areacode)(?P=prefix)(?P=number)

	   ''', '(800) 555-1212 800-555-1212 18005551212'))



	returns True      <-- note the above used  (?P<name>)  (?P=name)   and (?x) verbose





   1.1.7   (?=...)  and (?!...)   <-- lookahead  , performing lookahead in the target string without actually consuming those characters.      (?=...) is "positive" lookahead assertion;  (?!...) is "negative".

    
	   re.findall(r'(?x)
	     # positive assertion, lookahead first name of a person whose last name is ' van Rossum'
		 \w+(?= van Rossum)',

		 '''
		   Guido van Rossum
		   Tim Peters
		   Alex Martelli
		   Just van Rossum
		   Ray Hettinger
		 ''')

		returns ['Guido', 'Just']




       another example  -- negative lookahead


        re.findall(r'(?x)
		  # negative assertion - (?!...)   
		  # also used (?m) --- multiple line -- the multil-lines of the targeted-searching-text, 
		  (?m)^\s+(?!noreply|postmaster)(\w+)',

		  '''
		    sales@phptr.com
			postmaster@phptr.com
			eng@phptr.com
			noreply@phptr.com
			admin@phptr.com
		  ''')


		returns  ['sales', 'eng', 'admin']


        another example - finditer

		# note the "for e in "   ,  
		#  also not unstand   '%s@aw.com'  %   e.group(1)    ;     looks like  group(1)  is the (?!noreply|postmaster)  
		#  
		['%s@aw.com' %  e.group(1) for e in \
		re.finditer(r'(?m)^\s+(?!noreply|postmaster)(\w+)',

		'''
		   sales@php.com
		   postmaster@php.com
		   eng@php.com
		   noreply@php.com
		   admin@php.com
		''')]


        the above,  returns    ['sales@aw.com',  'eng@aw.com',  'admin@aw.com']





   1.1.8   "raw string"  --  single backspace,  double backspace

       \b  - is a regex ,  word boundary 
	   \\b  - raw string,  ie,  "\b" literal 





