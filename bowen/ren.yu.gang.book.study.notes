
7/16/2017 (Sunday) 


  Android's :  Activity ,  Service ,  Receiver , ContentProvider


1. Chapter 1 (Activity)

   onCreate -> onStart -> onResume -> run -> onPause -> onStop -> onRestart (back to onStart) or onDestroy (go to destroy)


   My take on these:  onStart (not necessary showing the activity on screen yet);  onResume can show  (need to come back to revisit it)


   TODO:  need to write that Demo, to show 2 activities sequence ...

       
     Completed it on 7/22/17 (Sat) https://github.com/jwang1/onPauseCalledBeforeAnotherActivityOnResume


7/20/17 (Thursday)

1. revisit Activity

   think of activity on the phone :   onCreate -- the activity is in mem and CPU now;   onStart -- the activity is warming up, but not visible yet;   onResume -- the activity is on screen now.



    so,  "onStart" vs "onResume" :  onResume activity is on Screen;  but onStart is not yet, almost there.    Think of the phone :  memory,  back of display, front of display  ---  |->|->|   so, onCreate (on memory), onStart (back of screen), onResume (front display) ...


  1.1  onPause of an Activity must be executed, before another activity's onResume ...

  1.2  when user's back to previous activity:  onRestart -> onStart -> onResume  executed

  1.3  when user switch to home or another activity;  previous activity's onPause -> onStop executed .

  1.4  when user click "back" soft button;  onPause -> onStop -> onDestroy

  1.5  should NOT do heavy work in onPause, because the next Activity's onResume cannot start until previous Activity's onPause completes


7/21/17 (Friday)

TODO:  

  *) Chapter 1, P6  example, how to make 2 activities swap, ie, one activity goes out, and the other comes in, to show the 1st activity's onPause is called before 2nd activity's onResume .

      "how to" part,  perhaps create 2 apps ?   or, can we have 2 activities in one app, and do the switch ? <--  should be, for instance : 
      a) create one activity with all todo list
    b) once click a todo item, go to the Details of the item.

  Did this before when creating the Movie review app, forgot it now,   <== Completed this on Saturday, in one App, created 2 activites (like Todo List;  and todoItem  two activities; and use Intent to startActivity;  and added onPause and onResume overrided methods simply for comments)


  ***   Completed it on 7/22/17 (Sat) https://github.com/jwang1/onPauseCalledBeforeAnotherActivityOnResume


7/22/17 (Saturday)

  1. working on TODOs from 7/21

  2. About Activities Priorities :  Activity showing on screen and user can interact with it  -->  Activity on front but not able to interact with users (for instance, the activitiy is front, but it has a dialog up, hence, user cannot interact with the activity, but the dialog)   -->  Activity not on screen 

  3.  Activity Priorities :  activites killed when out of resources

  4.  Activity LaunchMode !  --- important topic

    standard

    singleTop

    singleTask

    singleInstance



 5.  IntentFilter  matching ...

     action matching

     category matching

     data matching



7/22/17 (Satureday)

 Chapter 2 : IPC

 1. Binder


 2. Socket


 3. android:process

    *) can only be defined from Manifest file;

  *) process-name starts with  ':' character, means 'private process'

                  not start ':',  means the 'shared process' 

    *) SHARED DATA !!!

     the threading-synchronized may not working in processes-shared-data ...

    
  
    Inter-Process mechanism : 

      a) Intent passing data

      b) shared files

      c) SharedPreferences

      d) Binder Messenger

      e) AIDL

      -) ContentProvider

      f) Socket  (the Kernel level, Linux sys) and ...

      g) old days: I tried Pipe, socket, almost the shared memory (but just stopped at the analysis)


    Data-passing:

        a) serializable

        serialVersionUID --   if old objection has value 1L ;   the new class has value 2L,  and then,  (Serialized-Class) ObjectInputStream(FileInputStream("serialized-obj"))  will not work.


        if not set serialVersionUID in the class, deserialization will calculate hashCode from the object, and assign it to serialVersionUID.  Now, if class's new field or field-deleted, the hashCode will be different for the obj serialized before class change which also not serialVersionUID set.   Then, the deserialization going to fail.


      b) Parcelable

         In android apps, use Parcelable is better than Serializable; usage wise Parcelable is a little more typings; but i/o expense is small, and faster.



      c) Binder  <--- Chapter 2 (p52)

          *)  AIDL (Android Interface Definition Language ? )  -  also uses package, but still different from existing other Java classes.

              describe the interface methods (similar to RMI's methods? webmethods ? )  getBookList  and addBook defined in IBookManager.aidl

          *)  auto generated coe IBookManager.java from IBookManager.aidl file

              IBookManager includes Stub class which is used for anything transmit in the same process
                                    Proxy class for transmit in Different Processes.

          

              in case of two processes communication (IPC) using Binder;  the flow (cycle):

                   Client -> Binder -> Service (onTransact) -> thread-pool -> reply -> Binder -> Client


          *)  we can write Binder without AIDL file;  the AIDL file is used to generate Binder class.

                note the android.os.IInterface  

                         IBinder::transact


          *) Binder death (remote side terminated)   -- set some callback to notify service so that it can handle Binder death.

              IBinder::linkToDeath   IBinder::unlinkToDeath 



      d) Sharing with files :   process-1 writes to a file;   and process-2 reads from that file.


             now, if both write to the file, the shared-file can be problem .



      e) SharedPreferences

            data saved in /data/data/package-name/shared_prefs  directory

            the data can be lost, not recommended for IPC data sharing.



      f) Messenger

          it's built on AIDL, light-weight IPC :

            i. service layer :  MessengerService extends Service
            ii. client side  :  MessengerHandler extends Handler


      g) AIDL 

            supports :  primirary types (int, long, char, boolean, double etc)
                        String and CharSequence
                        List (only ArrayList and all its elements have to be supported by AIDL)
                        Map (only HashMap and all its elements have to be supported by AIDL)
                        Parcelable  (any objs implements Parcelable interface)
                        AIDL 


            



        binder pool 

          Binder mBinderPool = new BinderPool.BinderpoolImpl();



  *) ContentProvider (built on top of Binder)


  *) Socket 


    need permissions

    <uses-permission android:name="android.permission.INTERNET" />
    <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />


    TcpServer -  
    
      svrSckt = new ServerSocket(18001);

      final Socket client = svrSckt.accept();

      new Thread() { 
        @Override
        public void run() {
          responseClient(client);
        }
      }.start();

      void responseClient(Socket sckt) {
        .
        .
        .
      }





 4. android:thread


 7/27/17 (Thr) -  P121 ICP comparison -  

   bundler vs Shared-file vs AIDL vs Messenger vs ContentProvider vs Socket 

  
    BinderPool 



7/31/17 (Monday) 

   *) Completed reading "Android from scratch to master" -

      there are some good stuff, the structure is very clear, and learned quite a lot;  

    worth of reading again;  and the Final Project is good.



   *) watched 李宏毅's ML,  the 2'51" of https://www.youtube.com/watch?v=IzHoNwlCGnE&list=PLJV_el3uVTsPMxPbjeX7PicgWbY7F8wW9 is very helpful,

       watched "https://www.youtube.com/watch?v=IzHoNwlCGnE&list=PLJV_el3uVTsPMxPbjeX7PicgWbY7F8wW9"  (brief introduction of Deep Learning - very helpful on concept ,  history, simple, slow are better)

     watched "https://www.youtube.com/watch?v=FrKWiRv254g&list=PLJV_el3uVTsPy9oCRY30oBPNLCo89yu49&index=10" (CNN - Convolutional Neuro network) it's good, clearly explained CNN

     ==> TODO:  to watch the 2 videos of RNN (Recurrant Neuro Network)  --- links from Mr's Li's channel !



8/1/17 (Tue) 

View and event handling

  when an event raised, it goes through 
          Activity->Window->View 

  If view's onTouchEvent returns "false", ie, not handling such event, and then it will bubble up to Window, if still not handled, and then bubble up to Activity to be handled.  (similar to emergency handling, worker handles it first, if not able to, and then pass up to supervisor...) 


    1. one touch event, 

     *)  boolean dispatchTouchEvent(MotionEvent ev)

           "dispatch", if event dispatched to current-View, this method is called; and returns current-View's onTouchEvent and child view's dispatchTouchEvent method's value.

     *)  boolean onInterceptTouchEvent(MotionEvent ev)

           "used inside view's dispatchTouchEvent method - ie the above one", 

     *) boolean onTouchEvent(MotionEvent ev)


        used in dispatchTouchEvent method; used to handle that event, 


  In summary, 

    public boolean dispatchTouchEvent(MotionEvent ev) {
      boolean consume = false;

      if (onInterceptTouchEvent(ev)) {
        consume = onTouchEvent(ev);
      } else {
        consume = child.dispatchTouchEvent(ev);    // notice the child 
      }

      return consume;

    }



  
  2. the other book "Android from novice to master",  chapter 2, re-visit

      "ADB"  -- Android Debug Bridge   


         Goals / Motivations :   1) under the hood,  2) automation / batch processing -- kind like the Tomcat script auto dispatching


      adb devices   (after phone set usb debug, https://developer.android.com/studio/command-line/adb.html,  and connected to phone, and after brew install adb -- check google;   and now showed the physical phone connected via adb !)

    note, not checked android_sdk/platform-tools yet ...


  ==>  if adb NOT working, it's good to restart adb server

      adb kill-server


    ==>  The Wi-Fi connect (adb) is very useful (way of setting is also documented above)

  :build-tools $ adb tcpip 5555
  restarting in TCP mode port: 5555
  :build-tools $ adb connect 192.168.1.2
  connected to 192.168.1.2:5555
  :build-tools $ 


  --> verifying:

  adb devices
  List of devices attached
  192.168.1.2:5555  device


    --> Query for device
  adb devices -l
   
    192.168.1.2:5555       device product:klteuc model:SAMSUNG_SM_G900A device:klteatt



    ==>  send commands to a specific device

   a) first build APK from Android Studio
   b) find the APK file

   find . -name *apk
   ./app/build/outputs/apk
   ./app/build/outputs/apk/app-debug.apk


   c) install it on specific device, via

   adb -s 192.168.1.2:5555 install ./app/build/outputs/apk/app-debug.apk
   ./app/build/outputs/apk/app-debug.apk: 1 file pushed. 0.4 MB/s (1544402 bytes in 3.523s)
     pkg: /data/local/tmp/app-debug.apk
    Failure [INSTALL_FAILED_ALREADY_EXISTS]


    

    c-2) after deleting the existing apk file from device

    and install it again, it went to success


    adb -s 192.168.1.2:5555 install ./app/build/outputs/apk/activitiesCalling.apk
    ./app/build/outputs/apk/activitiesCalling.apk: 1 file pushed. 0.4 MB/s (1544402 bytes in 3.383s)
      pkg: /data/local/tmp/activitiesCalling.apk
      Success






    ==>  set port forwarding  (from local port to device port, vice versa)  ,  not tried, but in the doce 


  -->  Copy files from / to device

  adb pull "remote" "local"

  adb push "local"  "remote" 


  ==>  shell command


    adb -s 192.168.1.2:5555 shell ls -l
    drwxr-xr-x root     root              2014-03-30 03:40 acct




  ==> call "Activity Manager" (am)

    adb -s 192.168.1.2:5555 shell am start -a android.intent.action.VIEW
    Starting: Intent { act=android.intent.action.VIEW }


    NOTE, there was a small pop-up on PHONE !  (the activity)


        

   ==> call "Package Manager" (pm)

       adb -s 192.168.1.2:5555 shell pm uninstall com.iexpress.hello.oneactivityonpauserunsbeforeanotheractivityonresume
     Success

     after that, the APP got removed .


   ==> take snapshot 

       adb -s 192.168.1.2:5555 shell 
     shell@klteatt:/ $ screencap /sdcard/taken.from.adb.png
     shell@klteatt:/ $ ls /sdcard/taken*
     /sdcard/taken.from.adb.png
     shell@klteatt:/ $ ls -l /sdcard/taken*                                         
     -rwxrwx--- root     sdcard_r   397467 2017-08-02 00:38 taken.from.adb.png
     shell@klteatt:/ $ 



  ==> record video  (awesome stuff !)  <-- can we do this in background ?   this is a very hacking stuff

      adb -s 192.168.1.2:5555 shell

    screenrecord /sdcard/recorded.from.adb.mp4

    shell@klteatt:/ $ screenrecord /sdcard/recorded.from.adb.mp4
    ^Cshell@klteatt:/ $ ls -l /sdcard/record*
    -rwxrwx--- root     sdcard_r  4291147 2017-08-02 00:41 recorded.from.adb.mp4
    shell@klteatt:/ $


    --> get the recorded video local macbook pro,  and play here

    adb -s 192.168.1.2:5555 pull /sdcard/recorded.from.adb.mp4
    /sdcard/recorded.from.adb.mp4: 1 file pulled. 0.4 MB/s (4291147 bytes in 11.082s)



  ==> read ART (Android Runtime) for App

     Requires Android 7.0 (API level 24)

   <-- I have Android 5.1, hence not able to do it

    adb -s 192.168.1.2:5555 shell cmd package dump-profiles com.iexpress.hello.oneactivityonpauserunsbeforeanotheractivityonresume
    /system/bin/sh: cmd: not found



  ==>  other commands, 

     adb -s 192.168.1.2:5555 shell ls /system/bin     <--- check all commands


   adb -s 192.168.1.2:5555 shell dumpsys            <---  dump ALL android device stuff on local macbook pro screen !



  In Summary:  this (https://developer.android.com/studio/command-line/adb.html) is great for ADB !



8/2/17 (Wed) 

   TODO:  really want to build the tic-tac-toe 


8/6/17 (Sun) 

   1. still need to do the tic-tac-toe scheduled 8/2, 

   2. chapter 3,  3.5 - view scrolling conflits

    *)  parent container, once it gets events, it will handle all of them, will not pass to children containers.

    *)  

    <--  need to revisit, not even had the conflict; not into this subject right now.


   3. Chapter 4. view under the hood 

      ViewRoot,  DecorView ,  WindowManager 

    
    ViewRoot root = new ViewRootImpl(view.getContext(), display);
    root.setView(view, wparams, panelParentView);



      *) view rendering:   from ViewRoot::performTraversals() -> ::measure() -> ::layout() -> ::draw()    -->  drawing the view 

      *) DecorView :  


      *) MeasureSpec :  SpecMode, SpecSize 

          LayoutParams.MATCH_PARENT   
          LayoutParams.WRAP_CONTENT



    ViewGroup's measure conduct on its children views' measure 


    *) Layout :  setFrame set mLeft, mRight, mTop, and mBottom for View.


    *)  Draw:  
        background.draw(canvas)
        onDraw  (draw self)
        dispatchDraw (draw children)
        onDrawScrollBars



8/7/17 (Monday)

  1. Worked on "Self-defined-View" Page 63, Chapter 3, Book: Android from novice to expert - by Ming Ri Ke Ji - published 2012 in Chinese.
  2. Checked in the self-view android project at https://github.com/jwang1/androidSelfView


  3. GIT : 

    updated on 12/28/2017 (Thr) :

	   1) create LOCAL git project
	   2) create GitHub repository, from the site https://github.com/jwang1
	      for instance, created the following repository
		  https://github.com/jwang1/manual-writing-component.git

	   3) Now, from LOCAL, command line:

	      a.  add "remote" for local git project

		      git remote add origin https://github.com/jwang1/manual-writing-component.git

	      b.  push local commits to remote repository

		      git push --set-upstream origin master

		  c.  after that, we can push further local commits by simply  (because of --set-upstream ) 

		      git push


   
     push new local project to GitHub :  

	   1) in local android project, make sure clean project (from Android Studio is fine)
	   2) git init
	   3) git add -all  (make sure some good .gitignore)
	   4) git commit -am 'init check in: project short description'
	   5) *** create a new repository from GitHub
	   6) git remote add origin https://.....
	   7) git push -u origin master

	   8) --> reference : https://help.github.com/articles/adding-an-existing-project-to-github-using-the-command-line/


  4. TODO: 

  	 do the project on page 115 - from the book :  Android from novice to expert .

	 also need to do the tic-tac-toe


8/8/17 (Tue)

  1. Did the small project on page 115 - from the book: Android from novice to expert

     a couple of bugs, not checked in code yet.


8/10/17 (Thr) 

  1. Yesterday, did improved the code created on 8/8/17;  
  2. Improved more on this find-egg-with-chick game, 
  3. Uploaded it to GitHub : https://github.com/jwang1/androidTableLayoutImageViewFindChickInEgg
  4. Added thoughts, description for the design, implementation, and algorithm of this game.  
  5. Discussed with XL about it, and got the idea of improving the randomization algorithm, make it o(1), instead of current o(n) - looping over the image array.


  6.  TODO:  improve the algorithm, and then continue the tic-tac-toe project.



8/11 ~ 8/15 (all these days including Saturday and Sunday,  working on company stuff, metro code improvement, 
  draw all the stuff on the whiteboard
  1. algorithm
  2. implementation notes 
  3. walkthrough example

  <-- more like reverse-engineering;  good way may be:
  walkthrough -> algorithm -> implementation


8/15/17 (Tue) 

  1. trying android internationalization;  moving text to resource string.xml.


8/21/17 (Mon)

  1. Added I18N for "Hatch Egg" game.

  2. TODO:  Add descriptions for this app, so that when users search "Google Plays", they will get some ideas about what this game 
            is about, who are the idea players, what ages would be, and a little bit things in "About" developer 
			(a4a - automation for all; automation for a...) 



			How about we collect some downloads?   Perhaps "Google Play" can do that.

			And then, get an account, publish it first.


  3. TODO:  Add the Ads part,  and the AI ads ...  based on user's interests.


8/27/17 (Sun)

  1. ToDo:  still need to publish the app

  2.        one thing to do, is to make a scoreboard, and a flash pop-up, for the score/game, and total
            regarding the score board, let's never deduct points;  and make the points 150 per win / correct guess.
			so, we can tell how much the user played.  

  3.	    where to save the total score ?  



9/2/17 (Sat)

  1. Kotlin notes:  when "Kotlin in Action" book came  --  
  
  the feeling is:  Kotlin is just Java in C#,  like C# in Java at the beginning.  (p5, "type inference"  :  val x = 1) 

  Kotlin Compiler :  written in Java and Kotlin, and moving toward more Kotlin;  it is opensource?  GitHub https://github.com/JetBrains/kotlin

    
	 a) http://try.kotl.in    (try Kotlin online)

	    or 

		https://try.kotlinlang.org/#/Examples/Hello,%20world!/Simplest%20version/Simplest%20version.kt

	 b) official Kotlin forumns :  https://discuss.kotlinlang.org

	 c) slack chat:   http://kotlinlang.slack.com

	 d) Kotlin tag on stack overflow:   http://stackoverflow.com/questions/tagged/kotlin

	 e) Kotlin Reddit :  www.reddit.com/r/Kotlin




  2. Compiling Kotlin code

     kotlinc <source file or dir> -include-runtime -d <jar name> 

	 execute code

	 java -jar <jar name> 




  3. programming language

     statement vs expression

	   expression - has a value; can be part of another expression.  In Kotlin,  if (a > b) is an expression,  has value;  but in Java, it is just a statement .

	   statement  - not having value,



  4. Kotlin special :

     val  - Immutable reference;  cannot be re-assigned after initialization;  corresponding to Java's final variable
	 var  - mutable reference; can be re-assigned after initialization

     string template (p22) -  borrowed Unix shell scripting syntax:   "hello, $name"   -- here $name will be evaluated
	       - it is called template, sth like Velocity template;  Front-end mustasche (html with mustasche template, evaluating)


     classes, Properties  (this is more like C# stuff, where C# evolved from Java,  the Java getter and setter really .... just ... ;  and the reason Java did not change to C#'s properties, was simple ?....   not want to be "famed" as copying C# ?)

	 "var"  stuff is another C# evolvement from Java  



     Kotlin:  can put Multiple classes in one file, and choose any name for that file.

	          it is still good to stick to Java package and class file structure, so that easier for Java+Kotlin mixing project;  

			  but ?    would that be another bad thing like Java's Generic (to backward compatible, sacrifized generic types - using the type erasure - compile time;  really causing much Java Generic ....) 



     enum class :    Kotlin has to use both words; because enum has special meaning in Kotlin.



     switch can be on "enum class", also objects, or setOf, or more ... ;   Java's NOT to change such a way,  (or, those 1996 Java stuff prevent such changes from happening...)  

	
	 "when" keyword is good practice, perhaps some features from other programming lang I did not know.



     combining "type checks" and "casting"


	 "is"  compared to Java's instanceof  



    for (in in 100 downTo 1 step 2) {
	  ...
	}




9/3/17 (Sun) 

  1. ToDo:   need to re-read Mr. Ren's original blog, to get back,  was distracted by heavy after hour company projects tasks for several weeks.

  2. Reading Hu She’s “The Yang Du She” 

     2.1  Mr Hu’s  :   “Yan Dao:  read carefully”,  “Kou Dao: read aloud”,  “Xin Dao: think aloud”,  “Shou Dao:  check dict, take notes,  my extension to that - write down words on the same objects”.

     2.2  Mr Jiang Wen Yu :

          2.2.1   read the stuff close to what you’re doing now (for work, progress, or…)
                  this is similar to Mr Buffett’s theory of checking out 12 books on the same subject, and read them all, you will be good at it, and then just practice them over and over agin;  
                  also, similar to the programming langs;  broad interests are not the problem;  but the problem is that we have limit TIME, and RESOURCE, (like watering seed, not seeds, find a seed to water, and until it grout and grow plants);   and after that, we can extend the same (using the left over water, if lucky) to pursue the next INTEREST.   So, currently, Java, Enterprise, the Mobile programming, but Machine Learning!   

                  Now, the kid’s progress

          2.2.2   finish them (by highly focusing) in time

          2.2.3   write own editorial, or own programs, by using what we read/learned from the books selectively read !   Like Mr. Buffett’s on horse racing reading.



   3. Kotlin continued:

      3.1 @JvmOverloads  - instructs Kotlin compiler to generate Java overloaded methods, 

	  3.2 "open" - Kotlin defaults class and methods are default by "final";  while Java default by "open" - class can be inherited 
	         - Kotlin's abstract method of abstract class ;   both are always "open", hence, no need to explicitly use "open" key word, but they need "abstract" keyword. 

	     the relationship:

		 "final"     cannot be overridden
		 "open"      can be overridden
		 "abstract"  must be overridden
		 "override"  Overrides a memeber in superclass or interface;  overridden member is open by default, if not marked "final"



      3.3 "visibility modifier" :  public by default in Kotlin  (but in Java, the default is "package" access...)
	    
		                      Kotlin has not "package" usage;  but it has "internal" - meaning "visible inside a module - an IntelliJ concept"  

		 "public (default"   visible everywhere
		 "internal"          visible in a "module" - IntelliJ stuff (that is beyond "package" level -  but not "project" level)
		 "protected"         visible in subclasses
		 "private"           visible in a class only


		 public/protected/private modifiers in Kotlin are preserved when compiling to Java bytecode.  


		 in Java, no way to define "private" class;  the default is package-private level (need to understand more on this)

		 Kotlin's "internal" will be "public" in Bytecode for JVM.

		 In Kotlin, "outer" class doesn't see "private" members of its "inner" (or nested) classes in Kotlin.



     3.4 "inner and nested classes" :  nested by default



9/5/17 (Mon, Labor Day) 

     1.  Continue "Kotlin" 


	   1.1 Functions and classes


	     "sealed" class,   cannot be inherited?

		 "primary c-tor,  and initializer blocks inside c-tor"  

		 "compiler-generated methods:  data classes and class delegation" 

		      "=="  so, Kotlin get this "operator overloading" for Object comparisons

			  "HashCode()"  :  Hash containers,


		"Data classes" :  just another way of saying "DTO",  "BO" (business object),  "DAO" (data access object) <-- this is more on db access.


	
		"class delegation", using "by" keyword, 

		    --> whenever implementing an interface, we're "delegating" the implementation of the interface to another object!

			for example:

			    class DelegatingCollection<T> (
				   innerList: Collection<T> = ArrayList<T>()
				) : Collection<T> by innerList {
				    ...
				}

			notice "by" above, other methods of that interface will be autogenerated via Kotlin Compiler.

			here "delegation" means, interface's impl is delegated to ...



		"object" keyword;  declaring a singleton, an easy way,  with class definition



		"companion" keyword usage:  --- Need to revisit ,  not concentrate when reading it.

          "classes in Kotlin cannot have static memebers" ,  Kotlin relies on package-level functions . 
		     "top-level" functions are recommended, but they cannot access class' private members; 

			 companion objects (deonoted by "companion" keyword) 



		"annonymous inner classes"  
		    a) Java's annonymous inner class can only extend 1 class or implement 1 interface;
			b) Kotlin's can implement multiple or none interfaces.


        

		1.2.  Lambdas and Collections

		     
		    



	 2.  "Ze Yang Du Shu" - by Jian Wen Yu

	     2.1.  Reading --> for better characteristics
		 2.2.  Good humman -->  a) nice personalities;  b) solid knowledge;  and  c) agile problems solving, situations handling

		 2.3.  Books -- 2 types:  written materials,  and anythings (wisdom) not written down (even by observing natures) 
		 2.4.  a) reading books;  b) learn from idols  ;   c) observe surroundings carefully;  d) REFLECT, and CRITICAL THINKING 

		 2.5.  Reading what we need at the moment
		 2.6.  Finish it within TIME
		 2.7.  Read intensively, and others extensively, 
		 2.8.  CRITICAL THINKING,  -->   form own knowledge and wisdom after reading/learning from others  ;  
		           some applies to PROGRAMMING, or AI learning.

		 2.9.  ^^^  the above, ACTION.


9/5/17 (Tue) -

  1. Kotlin

     1.1  Lambdas and Collections


9/9/17 (Sat) - 

  1. Kotlin
    
	 1.1 Kotlin with high order functions

	    1.1.1  "inline" functions, compiler will replace every call to the function with "actual code implementing that function".  - similar to C macro or typedef in C++ .

	 1.2 Kotlin with Generics - almost same as Java's ;  compile-time generics, erased after compilation; no generics-available-at-run-times;

	     Note, for Python, dynamic programming lang,  itself is a generic type programming, using "duck type";  when programmers 
		    coded the function / class,  having the specific "type" in mind,  and at runtime, that type is assumed existed.


	   
9/17/17 (Sun) 

  1. trying to get into Python, because deep learning stuff really needs the interactive scripting (python) used a lot

  2. Python Applications Programming  (3rd Edition) - Wesley J. Chun

  ***chapter 1.  Regular Expression

    2.1  "re" module aligns to Perl regex.
	2.2  match(...)
	2.3  search(...)

    2.4  RegEx "groups";  the following, 2 parenthese; 2 sub-groups.
	
	     m = re.match('(\w\w\w)-(\d\d\d)', 'abc-123')

	     m.groups()
		 
		 m.group()
		 m.group(0)
		 m.group(1)
		 m.group(2)
		 m.group(3) <===  no such group;  index out of bound


		 two sub-groups

		 m = re.match('(a(b))', 'ab')

		 m.groups()



    2.5  RegEx findall vs finditer

	     s = 'This and that'

		 re.findall(r'(th\w+) (th\w+)', s, re.I)		# re.I  flag to ignore cases; case incensitive

		 # finditer ,  can use __next__() to iterate  - note, python-2 just next(); but python-3 changed.
		 #     as shown in https://stackoverflow.com/questions/1073396/is-generator-next-visible-in-python-3-0 
		 #        Special methods like __init__() and __del__ all have double underscores 


		 re.finditer(r'(th\w+) (th\w+)', s, re.I).__next__().groups()   # returns   ('That', 'this')


    2.6  sub() and subn() 

	    re.sub('X', 'Mr. Perf', 'attn: X\n\nDear X\n')


	    re.subn('X', 'Mr. Perf', 'attn: X\n\nDear X\n')   # will return number of substitutes ...


    2.7  \N   - group number N

	    # here is how to swap the mm with dd 

		re.sub(r'(\d{1,2})/(\d{1,2}/(\d{2}|\d{4})',  r'\2/\1/\3',  '2/20/91')   # returns  20/2/91




9/18/17 (Mon) 

  1. Quickly scanned "JavaScript Application Design" - Nicolas Bevacqua 
    
	   It's a book on several JavaScripts Libraries :  Grunt, NodeJS, a little Less, CommonJS, RequireJS, callbacks -> PromiseJS, Testing, and REST ...;  

	   did mention some stuff on deployment, 


  2. Back to Python study:

    2.1  Welsley J Chun's book P16 

	     "extension notation" :   Look ahead,  or look behind   

		 (?= (?:\d{5}|[A-Z]{2}))


		 a)  (?:\w+\.)*    ---  string that end with a dot, and such matches are neither saved for use nor retrieval later.

		 b)  (?#comment)   ---  No matching here, just commenting

		 c)  (?=.com)      ---  only do a match if ".com" follows, do not consume any of the target string.

		 d)  (?!.net)      ---  only do a match if ".net" does NOT follow.

		 e)  (?<=800-)     ---  only do a match if string is preceded by "800-", presumably for phone numbers; and do NOT consume the input string.

		 f)  (?<!192\.168\.) --- only do a match if string is NOT preceded by "192.168.", presumably to filter out a group of class c IP addresses.

		 g)  (?(1)y|x)      ---  if a matched group 1 (\1) exists, match against y;  otherwise, match agains x



		 so,  the above (?= (?:\d{5}|[A-Z]{2})) ---  uses item a, c .

		    so, in plain English, the above means,  for any string, starting with a space, followed by 5-digits, or followed by 2-uppercase-letters.
			that is,  " CA",  " 94023", 


    2.2  split()

	     re.split(', |(?= (?:\d{5}|[A-Z]{2}))',  'Mountain View, CA 94040')   # creates  ('Mountain View', 'CA', '94040')


9/30 (Sat) 
 
  1.  Python Applications Programming - Welsley J. Chun 

    1.1 P31 Extension Notations  (?...)
	    
      1.1.1  (?i)    <-- ignore cases

		re.findall(r'(?i)yes',  'yes? Yes. YES!!!')  


      1.1.2  (?m)    <-- multiple lines

	    re.findall(r'(?im)(^th[\w ]+)', """
		    This line is the first.
			another line,
			that line, it's the best
			""")


		the above returned  ['This line is the first', 'that line']      <== note the symbols are not included



      1.1.3 (?s)   <-- indicate dot (.) can represnet \n character;  usually such dot (.) represents all-chars exception \n

	     re.findall(r'(th.+)', '''
		    This line is the first
			this is second
			this is third
			''')

		returns ['this is seond', 'this is third']


		now,  notice the (?s)

		re.findall(r'(?s)(th.+)', """
		    This line is first
			this is second
			this is third
			''')

		returns ['this is second\nthis is third\n']     <-- since the match includes \n ;   there is 1 result, instead of 2.


	 1.1.4 (?x)  <-- lets users create more human-readable regex, by suppressing whitespace characters within regexes (except those in character classes or those that are backslack-escaped).   Also, has/comment/octothorpe symbols (#) can also be used to start a comment, as long as they're not within a character class backslash-escaped.


      
    Verbose


	    re.search(r'''(?x)
		    \((\d{3})\)      # area code
			[ ]              # space ;   note, this white space in [] is NOT escaped, counted in regex; but, spaces between ] and #  are supprsessed.
            (\d{3})          # prefix
			-                # dash
			(\d}{4})         # endpoint numbers
			''',  '(860) 555-1234').groups()

	    returns ['860', '555', '1212']     <--  note the above is looking for groups()


    1.1.5 (?:)   <--  lets users to "GROUP" parts of regex, but does NOT save them for future retrieval or use.  It's handy when you donot want superfluous matches that are saved and never used!

	    re.findall(r'http://(?:\w+\.)*(\w+\.com)', 
		    'http://google.com http://www.google.com http://code.google.com')

		returns ['http://google.com', 'http://www.google.com', 'http://code.google.com']


   1.1.6  (?P<name>)  and (?P=name)     <-- the formal saves matches by using a name id, rather than using increasing numbers - starting from 1 to N  - which is retrieved later by using \1, \2, ..., \N.

     similar to C# and Kotlin's named-parameters ,  vs  positional-parameters 

	     re.sub(r'\((?P<areacode>\d{3})\) (?P<prefix>\d{3})-(?:\d{4})',
		     '(\g<areacode>) \g<prefix>-xxxx', '(880) 555-2312')

		returns   ['(880) 555-xxxx']      <--  note the above used named-parameters, also used (?:) do not remember that-Group because the group not used later.



    Another example: 


	   bool(re.match(r'''(?x)

	     # match (800) 555-1212, save areacode, prefix, number
		 \((?P<areacode>\d{3})\) (?P<prefix>\d{3})-(?P<number>\d{4})

		 # space
		 [ ]

		 # match 800-555-1212
		 (?P=areacode)-(?p=prefix)-(?P=number)

		 # space
		 [ ]

		 # match 18005551212
		 1(?P=areacode)(?P=prefix)(?P=number)

	   ''', '(800) 555-1212 800-555-1212 18005551212'))



	returns True      <-- note the above used  (?P<name>)  (?P=name)   and (?x) verbose





   1.1.7   (?=...)  and (?!...)   <-- lookahead  , performing lookahead in the target string without actually consuming those characters.      (?=...) is "positive" lookahead assertion;  (?!...) is "negative".

    
	   re.findall(r'(?x)
	     # positive assertion, lookahead first name of a person whose last name is ' van Rossum'
		 \w+(?= van Rossum)',

		 '''
		   Guido van Rossum
		   Tim Peters
		   Alex Martelli
		   Just van Rossum
		   Ray Hettinger
		 ''')

		returns ['Guido', 'Just']




       another example  -- negative lookahead


        re.findall(r'(?x)
		  # negative assertion - (?!...)   
		  # also used (?m) --- multiple line -- the multil-lines of the targeted-searching-text, 
		  (?m)^\s+(?!noreply|postmaster)(\w+)',

		  '''
		    sales@phptr.com
			postmaster@phptr.com
			eng@phptr.com
			noreply@phptr.com
			admin@phptr.com
		  ''')


		returns  ['sales', 'eng', 'admin']


        another example - finditer

		# note the "for e in "   ,  
		#  also not unstand   '%s@aw.com'  %   e.group(1)    ;     looks like  group(1)  is the (?!noreply|postmaster)  
		#  
		['%s@aw.com' %  e.group(1) for e in \
		re.finditer(r'(?m)^\s+(?!noreply|postmaster)(\w+)',

		'''
		   sales@php.com
		   postmaster@php.com
		   eng@php.com
		   noreply@php.com
		   admin@php.com
		''')]


        the above,  returns    ['sales@aw.com',  'eng@aw.com',  'admin@aw.com']





   1.1.8   "raw string"  --  single backspace,  double backspace

       \b  - is a regex ,  word boundary 
	   \\b  - raw string,  ie,  "\b" literal 


10/7/17 (Sat)

 1. Using Python for a game

The game :

1. swap any letter with its adjustant
2. so that there will be at least "3" same letters on the same Row, or same Column
3. if there are no "3" or more letters on the same row or same column, nothing will happen except the swap itself
4. however, if there are "3" or more same letters on the same Column;  the above letters (if exist), will sink down 3 letters; 
   and, those "collected" letters (3 or more) will be filled by letters above them on the same column, 
   and, the positions after sink, will be filled by "Random" letters.

5. if "3" or more same letters are on the same ROW, and then, the rows above that row, with the same column of that row, will be sinked down.  Random generated letters will fill up the first row with the column of 'that row'.   

6. what if the "3 or more" same letters are on the same row, and also,  "3 or more" same letters on some columns !


   e b c A f i e g i k m
   d A A A A b c d a a e     <note 4 A on 2nd row>
   g i m A g i c e j o x

         ^
		 |
		 3 A on 4th column   (note, if 2nd Row got processed first;  and then, this 4th Column may not have adjacent 3-or-more same letters)


7. Recursion -->  or loops

   1) brute-force : 

      
	  for each ROW,  

	     starts from column 0,  



   2) improving 



10/14/17 (Sat) 
  1. Implementing the matching game in Python

     Found this site has good Python OOP stuff :  https://python.swaroopch.com/oop.html

     constants in Python: http://code.activestate.com/recipes/65207-constants-in-python/?in=user-97991



10/15/17 (Sun)

  Completed the Python Matching Game.



10/16/17 (Mon)


  0. Looks like I have all the Python libraries installed : 

jwang:build-tools jwang$ python
Python 3.4.3 (v3.4.3:9b73f1c3e601, Feb 23 2015, 02:52:03) 
[GCC 4.2.1 (Apple Inc. build 5666) (dot 3)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
>>> import numpy
>>> import matplotlib.pyplot
>>> import scipy
>>> import sklearn
>>> 



  1. Prepare for the Training course:

     install SciKit-learn :



	# install the numpy, scipy,  matplotlib, pytest, scikit-learn

	 pip install -U numpy scipy matplotlib pytest scikit-learn 




  2. test  matplotlib !

# following from stackoverflow:  (36470343) 

>>> import numpy as np
>>> import matplotlib.pyplot as plt
>>> x = np.linspace(0, 10)
>>> y = x**2
>>> plt.plot(x, y)
[<matplotlib.lines.Line2D object at 0x108570c88>]
>>> plt.show()


# note, the plot (graph) will show.




  3. Comparing frameworks:  including SciKit-learn, 

  https://www.youtube.com/watch?v=MDP9FfsNx60  (deep learning frameworks (SciKit Learn, TensorFlow, Theano, Keras, and Caffe))

    1) SciKit does NOT have neuro stuff;  and what SciKit has, TensorFlow has it all

	2) Caffe - production grade, but not easy to use, not much modularity ;  and Caffe architect went to TensorFlow now.

	3) Keras - on top of Theano and TensorFlow, and Keras uses the OOD;  --  more generic, all-purpose;  having good documentation
	  
	     But, Keras lacks of Performance ...


    4) Theano vs TensorFlow -

	   Theano has better docs, and been there for a while;  out performance TensorFlow on a single GPU;

	   But, TensorFlow outperforms Theano on Multi-GPUs (for parallel execution accross 


	   Theano supports Windows (MS windows);  TensorFlow not yet.


	   * Right now, Keras+Theano performs better than Keras+TensorFlow; 

	     But, the person created Keras works for Google. 

	 
    5) TF Learn

	   is the ONE:   TF Learn is basically Keras for TensorFlow, but Optimized for TensorFLow !  (because Keras+TensorFlow is NOT good on performance;   hence,  TF Learn !)





  4. INSTALL TF Learn on local 


     http://tflearn.org/installation/

	 I use Python 3 (pip3),  so

	 and also use CPU,  not GPU 


  To install TensorFlow

	 # Mac OS X, CPU only, Python 3.4 or 3.5:
	 $ export TF_BINARY_URL=https://storage.googleapis.com/tensorflow/mac/cpu/tensorflow-1.1.0-py3-none-any.whl


	 pip install -U $TF_BINARY_URL


  To install TF learn:

      pip install -U git+https://github.com/tflearn/tflearn.git



  Solve h5py issue (hdf5 is not supported on this machine (please install/reinstall h5py for optimal experience))


      pip install -U h5py





  5. Verify (TF learn, and TensorFlow) installations


  >>> import tflearn
  >>> import numpy as np



 
10/17/17 (Tue) - Learn as if you will leave forever.

Check his video: https://www.youtube.com/watch?v=BMT7FMwOIKc&list=PL2-dafEMk2A6a9LNzkeQv7QIDUWMNEfJi

there are some Neuro Network, etc.




***********************************************************
********  Almost 3 weeks onto company work  ***************
***********************************************************


11/11/2017 (Sat)  

TODO: 
  1. get Anuko on AWS  (RedHat OpenShift deleted old VM, all data and the app, and everything were GONE!)
  2. take notes part: on Anuko
  3. the SciKit-Learn part
  4. Mr Lynch part 
  5. Kids Math, literature


Actions:

  1. AWS:

     1.1 Install AWS Command Line Interface

	      https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/eb-cli3-install.html?icmpid=docs_elasticbeanstalk_console

     1.2 On my local,  just source the AWS EB everytime, as below:

	      alias aws='cd ~/Library/Python/3.4/bin'

		  export PATH=~/Library/Python/3.4/bin:$PATH

		  Verify the installation:

		  eb --version


	 1.3 the ASW EB CLI (command line interface) usage:

	     https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/eb3-cmd-commands.html



    1.4 sign in  

	   1.4.1  First, from AWS Console Web page,  go to "iam"  (Identity and Access Management)

              *** create an account, to get "access key" and "secrete access key"  which can be used in EB-CLI (from local machine, command line)


		From "AWS Console" on Web,  from Elastics Beanstalk ,  searching  "Access management",   and then,  from there create a user 

		   https://console.aws.amazon.com/iam/home?region=us-east-1#/users$new?step=final&accessKey&login&userNames=aws&passwordType=manual&groups=all_purpose



		==>  I created a user (aws,  mima t7)  <---  now got the 
		    
			   Access Key and
			   Secrete Access Key 



      1.4.2  Now, log in to AWS from command line

	     eb init -i

		 using the above "access key" and "secrete access key" 



     1.4.3  The user created above (aws)  can also sign in from web (so that we do not need to use Amazon shopping account)

		https://741674393425.signin.aws.amazon.com/console


	 1.4.4  From EB Command Line Interface:

	    1.4.4.1   open the app by

		     eb open

	    1.4.4.2   created dev-env by

		     eb create dev-env

        1.4.4.3   after coding,  deploying

		     eb deploy


  2. set it from aws console (web),  for Anuko 

    http://track-progress.us-east-1.elasticbeanstalk.com



   
   STILL having issue (permission) after installing the Anuko.  


   ***  Back to check Anuko installation requirement : 

   https://www.anuko.com/time_tracker/install_guide/linux_quick_install.htm





  3. For Google Cloud,  they have some AppEngine,  has own add-ons (like, to include app.yaml file); for Php app..




	 # starting the web app locally.
     dev_appserver.py --php_executable_path=/usr/bin/php -cgi $PWD


     # for Anuko,  even after copying/editing the app.yaml  ;  still complaining about 
	 # google.appengine.tools.devappserver2.errors.AppConfigNotFoundError: The "/home/****/timetracker/WEB-INF" subdirectory exists but is missing appengine-web.xml and web.xml

  

     Installed MySQL instance on Google, because AWS's MySQL charges high $30/month ? 




  4. Now, link Anuko (on AWS) to Google's MySQL instance. 

      4.1  Populate Google MySQL db from Local Anuko instance;  now for LOCAL Anuko,  need to set up local PHP etc !

	       https://jason.pureconcepts.net/2012/10/install-apache-php-mysql-mac-os-x/

		      (for Mac OS X,  the install is relatively simpler, because Apache already there;  simply need to update 

			    4.1.1   vi /etc/apache2/httpd.conf

				     uncomment out for line "LoadModule php5_module libexec/apache2/libphp5.so"

					 and then

					 sudo apachectl restart    

					 will do the work.


           http://localhost/phpinfo.php     (prints out a lot of information) 



  5. AWS instance access : 

     https://console.aws.amazon.com/ec2/v2/home?region=us-east-1#Instances:sort=instanceId

	 (when choose "Connect", it will show SSH stuff - which needs a private-key, and the host-name;  it is in the pop-up 
	  where information and commands are found)


	 Note, AWS using RedHat like Linux;  the Web directory is in  : 

	    /var/www/html/






12/9/2017 (Sat) 

  --  wow,  it's been almost 1 month, all onto company work.

  --  here, some comp proj required Angular stuff, so, onto it now.

  1. having "Learning Angular 2" by Pablo Deeleman at hand, but reviews on amazon.com saying this book is terribly outdated. 

  2. What other books then ? 

  3. Up to date ?    -->   going for  angular.io  (for Angular 2 stuff) 

     https://angular.io/guide/quickstart   (official doc) 

	 also the course :  https://www.udemy.com/the-complete-guide-to-angular-2/learn/v4/t/lecture/6655594?start=0


     3.1  npm - install nvm (for node) 
      
	        "nvm"   --   https://github.com/creationix/nvm


	 3.2  Angular CLI

		    https://angular.io/guide/quickstart

     3.3  install Boostrap for Angular 5 project via Angular-CLI

	      https://stackoverflow.com/questions/36292438/how-to-use-bootstrap-css-library-in-angular-2-project


12/10/17 (Sun)  

     lots of time shoving snow in the afternoon.

     3.4 this link tells Angular 5 file structures (created from Angular-CLI) 

     3.5 Debugging Angular apps created with Angular CLI in WebStorm

	     https://blog.jetbrains.com/webstorm/2017/01/debugging-angular-apps/

		 <==  still need to install Chrome Extension (IntelliJ Plugin)  

		 <==  Note, JetBrain WebStorm debugger cannot Set BreakPoint on "html" files; 
		    
			       BUT, Chrome WebDeveloper tools are ok !   (so, the native Chrome/FireFox web developer tool / debugger
				        is more powerful than JetBrain's debugger ! )


         NOTE:  cannot open PyCharm (or IntelliJ) at the same time with WebStorm;  because IntelliJ Chrome Extension can only
		        hook with 1 of the IDEs.  

				So, for IDE debugging,  need to close PyCharm/IntelliJ, just leave WebStorm running !

     3.6 Angular workflow in JetBrain WebStorm

	     https://blog.jetbrains.com/webstorm/2016/04/angular-2-workflow-in-webstorm/


12/11/17 (Mon)


  1. Angular project adding Bootstrap support

     adding  "./node_modules/bootstrap/dist/css/bootstrap.min.css"  in  .angular-cli.json  "style" section


  2. create new component

      ng generate component xyz    (it creates a new component, and updates  app.module.ts  )


12/14/17 (Thr)

  5:30 AM ,  Listening to the classical Piano musics,  and studying by doing,  it is surreal !

   1.  did not get any time to do this Angular 5 practice last night,  12/12 Tue worked on compa porject too tired to do own study.

   2. Angular Routing 

       ng generate module app-routing --flat --module=app

	   (--flat means not to create own dir)
	   (--module means to register this AppRouting into AppModule)

  
   3. Convention over Configuration stuff

      inside @NgModule({ }),  adding the following:

		  imports: [ RouterModule.forRoot(routes) ],


	  where Router initializes, and watches the "routes" changes ....



   4. did not realize I woke up earlier today. anyway, it's 9:20pm now

      continue the Angular Routing.

       
	  added the /heroes route and /dashboard route



12/15/17 (Fri)

   8:30 PM

   1. ActivateRoute holds information about the route to the instance of HeroDetailComponent

   2. Location - Angular service for interacting with browser.  Will use it later to navigate back to the view that navigated here.

      this.location.back() 


   3.  


12/16/17 (Sat) 

   1. the following TSLint took me a couple of hours to debug.

		   https://stackoverflow.com/questions/44853057/making-sense-of-no-shadowed-variable-tslint-warning

		   The linter complains because you are redefining the same variable multiple times. Thus replacing the ones in the closure containing it.

		   Instead of redeclaring it just use it:



     1)  the official site had the following code:  https://angular.io/tutorial/toh-pt6#import-heroes


			addHero (hero: Hero): Observable<Hero> {
			  return this.http.post<Hero>(this.heroesUrl, hero, httpOptions).pipe(
				  tap((hero: Hero) => this.log(`added hero w/ id=${hero.id}`)),
					  catchError(this.handleError<Hero>('addHero'))
			  );
			}


     2)  the above had "TSLint" warning (but looks like error from webstorm IDE);  anyway, to fix that ,  need following code:

	     that is, directly use the "hero" variable in tap,  do not redefine it
		 Also, for handleErr, it requires <any> type here, but not for the http.get ...
		 perhaps, http.get and http.post return different types.

	       addHero(hero: Hero): Observable<Hero> {
		     return this.http.post<Hero>(this.herosUrl, hero, httpOptions)
			   .pipe(
			     tap( _ =>  this.log(`added hero with id=${hero.id}`)),

				 catchError(this.handleErr<any>('addHero'))
			   );
		   }




   2. The Hero project and source code can be checked from : 

      https://embed.plnkr.co/?show=preview


      https://blog.cloudboost.io/angulars-heroes-tour-in-react-redux-3466bbda6aed


   3. Good place to see Unit tests in Angular 4/5


     some archived office doc :  https://v2.angular.io/docs/ts/latest/guide/testing.html


    ***   http://www.zackarychapple.guru/   ***

	  http://www.zackarychapple.guru/angular2/2016/11/25/angular2-testing-components.html

	  https://dzone.com/articles/testing-angular-2-applications


      http://www.zackarychapple.guru/angular2/2016/11/25/angular2-testing-services.html

	  http://www.zackarychapple.guru/angular2/2016/10/19/angular2-e2e-testing.html  [ the end-2-end tests ]

      https://codecraft.tv/courses/angular/unit-testing/classes-and-pipes/


   4. Some HTML attributes vs DOM properties

      https://angular.io/guide/template-syntax

	  4.1  html attributes initialize DOM properties, but, once it's initialized, the attributes canNOT be changed;

	       DOM properties can be changed.


              *** HTML attribute value speicify the "initial" value;  DOM value property is the "current" value  ***


           Attributes initialize DOM properties and then they are done. Property values can change; attribute values can't.

		   For example, when the browser renders <input type="text" value="Bob">, it creates a corresponding DOM node with a value property initialized to "Bob".


		
		When the user enters "Sally" into the input box, the DOM element value property becomes "Sally". But the HTML value attribute remains unchanged as you discover if you ask the input element about that attribute: input.getAttribute('value') returns "Bob".

		The HTML attribute value specifies the initial value; the DOM value property is the current value.

		The disabled attribute is another peculiar example. A button's disabled property is false by default so the button is enabled. When you add the disabled attribute, its presence alone initializes the button's disabled property to true so the button is disabled.


		Adding and removing the disabled attribute disables and enables the button. The value of the attribute is irrelevant, which is why you cannot enable a button by writing <button disabled="false">Still Disabled</button>.

		Setting the button's disabled property (say, with an Angular binding) disables or enables the button. The value of the property matters.

		The HTML attribute and the DOM property are not the same thing, even when they have the same name.





12/17/17 (Sun)

    1. continue on Angular 5 

	   "Fundamentals" 

	   1.1  Lifecycle hooks 

	        constructor -> ngOnChanges -> ngOnInit -> ngDoCheck (ngAfterContentInit, ngAfterContentChecked, ngAfterViewInit, ngAfterViewChecked)  -> ngOnDestroy



			*** this link provides Live Examples : https://angular.io/guide/lifecycle-hooks ***

	     

		    ngOnChanges called before ngOnInit

			ngOnInit called only once, after first ngOnChanges

			ngDoCheck called during "every" change detection run; immediately after ngOnChanges and ngOnInit

			ngAfterContentInit (a component only hook),  called once, after the first ngDoCheck ;   

			ngAfterContentChecked (component only hook), called after ngAfterContentInit and "every" ngDoCheck.

			ngAfterViewInit (component only hook), called once, after ngAfterContentChecked

			ngAfterViewChecked (component only hook), called after ngAfterViewInit and "every" ngAfterContentChecked

			ngOnDestry cleanup just before Angular destroys directive/component;  unsubscribe Obervables and detach event handlers to avoid memory leaks.   called just before Angular destryos the directive/component.



      

       1.2  Component Interaction

	       https://angular.io/guide/component-interaction

		   has good example on "component interaction" with ngOnChanges 


		Notice how they get the "changes" component/elements, and the property-Name, and then, the "isFirstChange() ,   currentValue,  previousValue


		   @Component({
			  selector: 'app-version-child',
			  template: `
				<h3>Version {{major}}.{{minor}}</h3>
				<h4>Change log:</h4>
				<ul>
				  <li *ngFor="let change of changeLog">{{change}}</li>
				</ul>
			  `
			})
			export class VersionChildComponent implements OnChanges {
			  @Input() major: number;
			  @Input() minor: number;
			  changeLog: string[] = [];
			 
			  ngOnChanges(changes: {[propKey: string]: SimpleChange}) {
				let log: string[] = [];
				for (let propName in changes) {
				  let changedProp = changes[propName];
				  let to = JSON.stringify(changedProp.currentValue);
				  if (changedProp.isFirstChange()) {
					log.push(`Initial value of ${propName} set to ${to}`);
				  } else {
					let from = JSON.stringify(changedProp.previousValue);
					log.push(`${propName} changed from ${from} to ${to}`);
				  }
				}
				this.changeLog.push(log.join(', '));
			  }
			} 


       

      1.3  This link (office google doc: 

	       https://angular.io/guide/component-interaction


		   has good e2e Tests 

			
		   "e2e" allows "Button Clicks"  action, and then, check the flows ...


			For instance, the nested newMinorButton.click() and newMinorButton.click() 

				it('should set expected values after clicking \'Minor\' twice', function () {
				  let repoTag = element(by.tagName('app-version-parent'));
				  let newMinorButton = repoTag.all(by.tagName('button')).get(0);
				 
				  newMinorButton.click().then(function() {
					newMinorButton.click().then(function() {
					  let actual = getActual();
				 
					  let labelAfter2Minor = 'Version 1.25';
					  let logAfter2Minor = 'minor changed from 24 to 25';
				 
					  expect(actual.label).toBe(labelAfter2Minor);
					  expect(actual.count).toBe(3);
					  expect(actual.logs.get(2).getText()).toBe(logAfter2Minor);
					});
				  });
				});




        1.4  Parent component listens for child component events

		    EventEmitter (child component exposes event property;  and Parent component binds to that even property...)

			*** child component emits an @Output event-property

			   @Output() onVoted = new EventEmitter<boolean>();

			   vot(agreed: boolean) {
			     this.onVoted.emit(agreed);   // <===  note the emit on the agreed boolean value from Child compnent's click event !

				 this.voted = true;
			   }


			*** now Parent component binds

			   in Parent component Template which uses child component (app-voter)

			      <app-voter *ngFor="let voter of voters"
				     [name]="voter"
					 (onVoted)="onVoted($event}">
				  </app-voter>


				notice the Parent VoteTakerComponent

				  binds an event handler called "onVoted" that responds to the "child event payload $event" and updates a counter

				     Notice the "$event" which is the child's event-payload


				  export class VoteTakerComponent {
				     .
					 .
					 .

				     onVoted(agreed: boolean) {
					   agreed ? this.agreed++ : this.disagreed++;
					 }
				   }
	       
	       
	       
	       

       1.5 Parent component interact with Child component via "local variables"


			The parent component cannot data bind to the child's start and stop methods nor to its seconds property.

			You can place a local variable, #timer, on the tag <countdown-timer> representing the child component. That gives you a reference to the child component and the ability to access any of its properties or methods from within the parent template.

            *** note the following #timer (used in app-countdown-timer child component)
            *** and then, parent component can call child-component's method, timer.start(), timer.stop()

			@Component({
			  selector: 'app-countdown-parent-lv',
			  template: `
			  <h3>Countdown to Liftoff (via local variable)</h3>
			  <button (click)="timer.start()">Start</button>
			  <button (click)="timer.stop()">Stop</button>
			  <div class="seconds">{{timer.seconds}}</div>
			  <app-countdown-timer #timer></app-countdown-timer>
			  `,
			  styleUrls: ['../assets/demo.css']
			})
			export class CountdownLocalVarParentComponent { }



	   1.6  Parent calls an @ViewChild() 


			** note Parent uses @ViewChild(CountdownTimerComponent) belown.


				@Component({
				  selector: 'app-countdown-parent-vc',
				  template: `
				  <h3>Countdown to Liftoff (via ViewChild)</h3>
				  <button (click)="start()">Start</button>
				  <button (click)="stop()">Stop</button>
				  <div class="seconds">{{ seconds() }}</div>
				  <app-countdown-timer></app-countdown-timer>
				  `,
				  styleUrls: ['../assets/demo.css']
				})
				export class CountdownViewChildParentComponent implements AfterViewInit {
				 
				  @ViewChild(CountdownTimerComponent)
				  private timerComponent: CountdownTimerComponent;
				 
				  seconds() { return 0; }
				 
				  ngAfterViewInit() {
					// Redefine `seconds()` to get from the `CountdownTimerComponent.seconds` ...
					// but wait a tick first to avoid one-time devMode
					// unidirectional-data-flow-violation error
					setTimeout(() => this.seconds = () => this.timerComponent.seconds, 0);
				  }
				 
				  start() { this.timerComponent.start(); }
				  stop() { this.timerComponent.stop(); }
				}


       1.7 Parent and child communicate via Services 


				@Injectable()
				export class MissionService {
				.
				.
				.

				}


				now it is injected into: 


				export class MissionControlComponent {
					constructor(private missionService: MissionService) {
						missionService.missionConfirmed$.subscribe(
						  astronaut => {
							this.history.push(`${astronaut} confirmed the mission`);
						  });
					  }




				The MissionService is also injected in:

				export class AstronautComponent implements OnDestroy {
				.
				.
				.

				  constructor(private missionService: MissionService) {
					this.subscription = missionService.missionAnnounced$.subscribe(
					  mission => {
						this.mission = mission;
						this.announced = true;
						this.confirmed = false;
					});
				  }



				Notice that this example captures the subscription and unsubscribe() when the AstronautComponent is destroyed. This is a memory-leak guard step. There is no actual risk in this app because the lifetime of a AstronautComponent is the same as the lifetime of the app itself. That would not always be true in a more complex application.

				You don't add this guard to the MissionControlComponent because, as the parent, it controls the lifetime of the MissionService.



12/25/17 (Mon) Christmas Day 

  1. finally got the time tracker set up locally correctly

     a. had issue to install MySQL (had to upgrade mac os, ie, install the updates long due)
	 b. migrate data from Google MySQL to local MySQL (Google's too expensive, about $80/month)
	 c. had to make both Time Tracker and MySQL on LOCALY machine  (Amazon side, costs $60/month to use the AWS, which includes DB;  but without that, still $20 for AWS,  the $20 load balancer can be removed;  still minimum $20/month the run the Time Tracker, NOT worth of it)  <-- moving to local server

	 d. Local Server had "Access Denied." Errors;  originally thought DB issue;  after a while, today
	 e. tried to download Time Tracker, and use locally; not all thing are good.   The yesterday's failures were due to OLD version of Time Tracker, accessing new Time Tracker DB models;  therefore, "Access Denied".

	 Now, all things are good.



  
  2. Finally, get time, BACK to Angular 5 study !

     a. continue to review the Angular stuff ... the official site and docs
	 b. continue to do the projects (beyond the tutorials)
	 c. 



12/26/17 (Tue) holiday

  1. continue on Angualr 5, and some CSS

     https://angular.io/guide/animations   (need to re-read this section again, also the Pipes, Structural Directives) !
 

  2. Need to do projects 
     
	 https://www.udemy.com/the-complete-guide-to-angular-2/learn/v4/t/lecture/6656036?start=0




12/27/17 (Wed) day off

  1. morning, implemented property driven HBO ads (gong si project)

  2. quickly scanned "Joel on Software ..."  by Joel Spolsky - who co-founded stackoverflow, after he left Microsoft for 3-yr project management on Excel around 1993~199x 

     One thing in common: 

	   Page P183 ~ 186;   Do NOT throw old code simply for the sake of writing new code.   The old code has lot of bug-fixes, and those bugs were identified by real customers (many) 

       He also gave a good example of refactoring existing code ...  need care,  and (nowadays, it'd be not much troubles, because we have Unit tests to check any changes);  and after refactoring, still handles those bug-fixes identified with years customer usage.   (the knowledge of bugs, cases);   new coding may not necessary avoiding those bugs, and the 'new team members' may not be those created version-1.

	   Alas.


12/28/17 (Thr) day off

  1. Good site on using bootstrap in Angular 5 projects

	 (great blog)

     https://loiane.com/2017/08/how-to-add-bootstrap-to-an-angular-cli-project/


	 1.1  It summarizes all possible ways
	 1.2  It has bootstrap,  and ngx-bootstrap (this is for the dropdown, modal etc without using jQuery) 

	 1.3  It has way of organize the ngx-bootstrap "modules" imported, and organize it into a Angular module



 2. Also did 2 exercises with this Maximillian's course, need to do this fast.... 

    more stuff to do;  

	*) project, and
	*) Deep Learning.



12/29/17 (Fri) day off
   1. worked on comp stuff, from 9:30am ~ 2:30pm

   2. studying the "Modern Java Recipes" - Ken Kousen   

      saying for Java 8 and 9;  actually, it's more on Java 8;  


12/30/17 (Sat) 

  1. Continue on "Modern Java Recipes" - Ken Kousen

     *1.1*) Functional Interfaces  - can only have 1 "abstract" method

	   a) prior to Java 8,  all java interface methods were "abstract";  but now, to keep an interface as @FunctionalInterface, we need to have other methods as "default", or "static",  because @FunctionalInterface only allows 1 "abstract" method


	   b) All methods in Java Interfaces;  are "public",  hence, left out (ie, not writing);  same about "abstract" method, such keyword not needed in interfaces;


       c) Java Comparator Interface, has 2 "abstract" methods, yet, it is still @FunctionalInterface, WHY?

	      it has 
		          int compare(T o1, T o2);     // an abstract method

				  boolean equals(Object obj);  // another abstract method


		  It runed out, "equals" overrides Object's equals method,  therefore, NOT counted as @FunctionalInterface's "abstract" method;  although "equals" is an "abstract" method,  BUT not counted as @FunctionalInterface's
	   
            (https://stackoverflow.com/questions/23721759/functionalinterface-comparator-has-2-abstract-methods)

			See the javadoc of FunctionalInterface:

			If an interface declares an abstract method overriding one of the public methods of java.lang.Object, that also does not count toward the interface's abstract method count since any implementation of the interface will have an implementation from java.lang.Object or elsewhere.



          Good info on @FunctionalInterface

		  https://stackoverflow.com/questions/36881826/what-is-use-of-functional-interface-in-java-8/36882003


		  @FunctionalInterface annotation is useful for compilation time checking of your code. You cannot have more than one method besides static, default and abstract methods that override methods in Object in your @FunctionalInterface or any other interface used as a functional interface.

		  But you can use lambdas without this annotation as well as you can override methods without @Override annotation.

		  From docs

		  a functional interface has exactly one abstract method. Since default methods have an implementation, they are not abstract. If an interface declares an abstract method overriding one of the public methods of java.lang.Object, that also does not count toward the interface's abstract method count since any implementation of the interface will have an implementation from java.lang.Object or elsewhere





     ***2***) "Default" method in Java Interfaces

	    -- Backward Compatibility

		   because, adding a new "abstract" method in interface - forces old classes implementing that interface, to implement/override that new 'abstract' method;  therefore, 

		    for such 'new' method, instead of 'abstract', we can put 'default' with implementation.


        ???) NOW, if 2 interfaces have the same "default" method (with the same signature),  and 1 class implements both interfaces, what will happen ?
		   <--  that is classical "Diamond Inheritance" issue;  C++ allows multi-inheritance (but emit compile-time error if there are ambiguous 

		   <== Java does not allow "Diamond Inheritance", so, for the above case, the 'class' has to OVERRIDE the "default" method in the 2 interfaces.



    ***3***) "static" method in Java interfaces

	       Class level utility method, with "implementation";  but not to be overridden (?)

		   List<String> bonds = Arrays.asList("Dalton", "Craig", "Moore", "Brosnan");

		   List<String> sorted = bonds.stream().sorted(Comparator.naturalOrder()).collect(Collectors.toList());

		   sorted = bonds.stream().sorted(Comparator.reverseOrder()).collect(Collectors.toList());

		   sorted = bonds.stream().sorted(Comparator.comparingInt(String::length)).collect(Collectors.toList());



      ^1^  Static method in Interface must have implementation
	  ^2^  it cannot be overridden
	  ^3^  call static methods from interface name
	  ^4^  do not need to implement an interface to use its static methods



  
   ***4***)  java.util.function package

      _1_  consumer - takes a generic argument, and returns nothing
	  _2_  supplier - takes no argument, and returns a value
	  _3_  predicate - takes an argument, and returns a boolean
	  _4_  function - takes a single argument, and returns a value.



       *) consumer (can be treated as some sort of Action on an element)

	      java.util.function.Consumer has
		     void accept(T t)
			 default Consumer<T> andThen(Consumer<? super T> after)


          java.util.Iterable  forEach method takes Consumer as an argument, as

		     default void forEach(Consumer<? super T> action)    // similar to Consumer::andThen(...)


			 for example: 

			   // Anonymous Class
			   Arrays.asList("a", "b", "c").forEach(new Consumer<String>() {
			       @Override
				   public void accept(String s) {
				       System.out.println(s);
				   }
			   }

			   // Expression Lambda
			   Arrays.asList("a", "b", "c").forEach(s -> System.out.println(s));   // here the anonymous function is a Consumer

			   // Method Reference
			   Arrays.asList("a", "b", "c").forEach(System.out::println);  


          

		  ^^^^)  BiConsumer - accepts 2 generic arguments, and returns nothing.


		  ^^^^)  Other uses of Consumer in standard lib:

		     Optional.ifPresent(Consumer<? super T> consumer);  // saying, if a value presents, invoke the specified consumer, otherwise, do nothing.

              Stream.forEach(Consumer<? super T> consumer);     // for each element, invoke the specified consumer, do something

			  Stream.peak(Consumer<? super T> consumer);        // Returns a stream with the same elements as the previous/existing stream;  BUT, before returning, it performing the specified consumer/action.    




   3. Java 9 study : 

      https://www.youtube.com/watch?v=QqmQ_0tV978


	  3.1  module-info.java 


      and 

	  3.2  Trisha Gee's video on IntelliJTv ... (youtube) ...   <-- good summary ....




12/31/17 (Sun) 

  1. Did Exercise 3 (practice directives) 

     *)  notes on Angular-CLI

	     Change the "prefix" for the default module : https://github.com/angular/angular-cli/issues/3728

		 ng new xyz-project --prefix=exercise3


1/1/18 (Mon) 

 1. studied Angular 5 - 

 2. watched Java 9 stuff


1/2/18 (Tue)

 1. Angular 5 -- Practiced Child-Component @Output() EventEmitter ;  and Parent-Component binds it and gets the value of $event   (note, that type for EventEmitter,  can be an JS Object)

 2. watched some Java 9 video - Venkat's


1/3/18 (Wed)

  1. Angular 5 

     1.1)  Template Local reference (can only be used in template,  but can be passed to click events etc)

	 1.2)  Template local reference acces via @ViewChild in controller ...

	 1.3)  practice more @Output, @Input 


  --> the next one is:  Directives for DOM handling.



1/4/18 (Thr)

  1. Study the "Software Architecture"

     1) What is architecture - Not block diagram of software release;  but a long-term strategy defines the boundaries and particular context of a problem to be solved with software.

	    If there is a STRATEGY and LONG-TERM VIEW of what PROBLEM we are trying to SOLVE, 
		and a STRATEGY for solving it in general, we can make incremental progress one release at a time, without backing ourselves into a corner. 

		<---  So,  software architecture, from the above point of view, is basically, PLAN-AHEAD for whole company,  similar to business owners PLAN-AHEAD of business to do, either new business, or pivoting ...


		<--- this is somewhat differring from https://msdn.microsoft.com/en-us/library/ee658098.aspx ;  but the above view is more from START-UP point of view,  if you start up a new software company, that is basically you need to PLAN-AHEAD.  


    2)  Top-down approaches:

	    2.1) Problem Domain  ---  WHAT really trying to solve/do ?

		2.2) Architectural Requirements --- 
		        things/features/ need to have for the next three to five years. It's business strategies/requirements written in Techical way ...

		2.3) Arch Strategy:  define the building blocks for the architecture, and the relationship; and use the "Dive & Conque" to slice the problems into pieces that people can grasp.

		2.4) Architure -- the requirements and desings for the above strategy, and set a good responsibility for each building block, similar to the OOD high cohesion, low coupling.

		2.5) System Requirements --- what each building block needs to implement.

		2.6) System Design --- a short-term design for a release, in line with the architecture, implement the requirements,

		2.7) System Implementation --- Complete the release based on the design, fulfil the sys requirements, and within the constraints of the architecture.

		2.8) Tests --- from unit tests, component tests, integration test, user acceptance tests, to real world tests (can borrow Intuite way; but never Mozilla way - which rolled out rewritten software without much tests to real world and get back to fix <-- very bad).




  2.  Angular 5 LifeCycle : 


      1) ngOnChanges (when a bound INPUT property changes) (can be executed multiple times)
	  2) ngOnInit (called when Component is initialized)
	  3) ngDoCheck (called whenever something in Template got changed;  hence called a lot)
	  4) ngAfterContent (called after ng-content has been projected into view)
	  5) ngAfterContentChecked (called each time the projected content has been checked)
	  6) ngAfterViewInit (called after Component's View and child-views been initialized)
	  7) ngDestroy (called when component is about to be destroyed) <---  how is component destroyed ? 


  
  3.  Practice ngOnChanges  
  
        in exercise3 repository

		a) log-message.component has @Input() of LogMessage;  
		b) since ngOnChanges checks @Input's changes,  
		c) just implement OnChanges interface for log-message.component
		d) set some string-interpolations 


1/5/18 (Fri)

  1. practice "Modern Java Recipes" - Ken Kousen

    1)

     Stream.of(T... values)
	 Stream.of(T t) 
	 Stream.iterate(T seed, UnaryOperator<T> f) ...  with limit(12) ...
	 Stream.generate(Supplier<T> s)   with limit(11) ...   for instance to generate 11 random numbers
	 Collection.stream() 


    2) reduction

	  Arrays.stream(strings)
	    .mapToInt(String::length)
		.sum();


     int sum = IntStream.rangeClosed(1, 10)
	                // here reduce uses IntBinaryOperator , orElse giving 0, if stream has no data.
	            .reduce((x,y) -> {
				  System.out.println("x=%d, y=%d \n", x, y);
				  return x + y;
				}).orElse(0);


	x=1, y=2
	x=3, y=3
	x=6, y=4
	x=10, y=5
	.
	.
	.
	x=45, y=10

	sum = 55


	Now, using "binary operators" to achieve the same

	   Stream.of(1,2,3,4,5,6,7,8,9,10)
	     .reduce(0, Integer::sum);

	sum = 55


    3)  stream, efficiency, and under the hood

    String s = Stream.of("a", "b", "c")
	  .reduce("", String::concat);

	s is :  abc

    
	***  Note, the above way is not memory-efficient,  concat creates new string, and can produce high GC pressure

	    the following takes a "Supplier" for the collection, 
		                    a "BiConsumer" adding a single element to the collection
							a "BiConsumer" combines two collections.   


	  so,  improvement

	  String s = Stream.of("a", "b", "c")
	              .collect(() -> StringBuilder(),  // supplier, to create a StringBuilder
				           (sb, str) -> sb.append(str),  // so, append string
						   (sb1, sb2) -> sb1.append(sb2)) // combine two results
				  .toString();


	   really a lot ... 


	*** now, the above can use method reference 

	 String s = Stream.of("a", "b", "c") 
	             .collect(StringBuilder::new,
				          StringBuilder::append,
						  StringBuilder::append)
				 .toString();


	*** actually, we use the following a lot 

	  String s = Stream.of("a", "b", "c")
	              .collect(Collectors.joining());




    4) most genral form of reduce

	  <U> U reduce(U identity,
	               BiFunction<U, ? super T, U> accummulator,
				   BinaryOperator<U> combiner)


      
	  // accumulating books into a map

	  HashMap<Integer, Book> bookMap = 
	     books.stream()
		 .reduce( 
		          new HashMap<Integer, Book>(),  // Identify value for putAll
		 
		          (map, book) -> {				 // Accumulate a "single" book into Map using put
				    map.put(book.getId(), book);
					return map;
				  },

                  (map1, map2) -> {				 // Combine multiple Maps using putAll
				    map1.putAll(map2);
					return map1;
				  });



    5) sort 

	   List<String> sorted = 
	   		strings.stream()
			.sorted(Comparator.comparingInt(String::length))
			.collect(toList());
	                         



 2. Django - 

    https://www.youtube.com/watch?v=9Wbfk16jEOk



1/6/18 (Sat) 

  1. Modern Java Recipe - Ken kousen

     1.1) Comparator 

	     stringLst.stream()
		   .sorted(comparing(String::length)
		            .thenComparing(naturalOrder()))
		   .collect(toList());
      
	 1.2)  two static identity methods (givent an element, and just return it)

	      static <T> Function<T, T> identity()  {
		      return t -> t;
		  }


		  static <T> UnaryOperator<T> identity() {
		      return t -> t;
		  }


     1.3)  convert List to Map

	     Map<Integer, Book> bookMap = listBooks.stream()
		 								.collect(Collectors.toMap(Book::getId, b -> b);

		 or   listBooks.stream().collect(Collectors.toMap(Book::getId, Function.identity());



    1.4) Sorting maps 

	    try (Stream<String> lines = Files.lines(dictionary)) {
		  lines.filter(s -> s.length() > 20)
		    .collect(Collectors.groupingBy(String::length, Collectors.counting()))
			.forEach((len, num) -> System.out.printf("%d: %d\n", len, num));
		} catch (Exception e) {
		}


        Collectors.groupingBy  produces Map<Integer, Long> here ...  Collectors.counting() returns long 
		          



    1.5)  interface Collector<T, A, R> 

        Type parameters:
		<T> - the type of input elements to the reduction operation
		<A> - the mutable accumulation type of the reduction operation (often hidden as an implementation detail)
		<R> - the result type of the reduction operation




    1.6)  Partitioning and Grouping

       listStrings.stream()
	     .collect(Collectors.groupingBy(String::length));


    1.7) creating Immutable collections

	   Map<String, Integer> map = Collections.unmodifiableMap(
	   		new HashMap<String, Integer>() {{
			    put("have", 1);
			    put("has", 2);
			    put("do", 3);
			    put("does", 4);
			    put("would", 5);
		}});


		<===  but the above can be replace, in Java 9, as

		Map.of(....)



    1.8)  Java 7's  Objects class, many static helper methods ...

	
	1.9)  Map's default methods


	   computeIfAbsent(K key,  Function<? super K,  ? extends V> mappingFunc)


       orElse ...


    1.10)  Default Method Conflict

	   i) conflict between a method in a "class", and a default method in an "interface",  the "class" always wins

	   ii) conflict between 2 interfaces, where one is a descendant of the other, then the descendant wins, the same way they do in classes.

	   iii) if there is "no" inheritance relationship between the 2 defaults, the class will NOT compile.


	1.11) Checked Exception handling

	   -->  extract (create) a method which handles the checked-exception  (either convert to RuntimeException;  or just gulp the exception and return some value);   and then,  call that method in lambda ...  

	       RuntimeException will be ok;  


		  // for example

				public static void main(String[] args) {
					System.out.println("Hello World!");

					List<Integer> ints = List.of(5, 4, 3, 2, 1, 0);

					Integer sum = ints.stream()
							.mapToInt(d -> div(10, d))
							.sum();

					System.out.println("10 divided by 5, 4, 3, 2, 1, 0;  and the sum of division is : " + sum);

				}


				private static Integer div(Integer i, Integer j) {
					try {
						return i / j;
					} catch (Exception e) {
			//            e.printStackTrace();
						//return 0;
						//throw new RuntimeException(e.getMessage());
						throw new RuntimeException("div/0");
					}
				}


    1.12)  Using Generic Exception Wrapper

	    The author's generic wrapper

		// NOTE, here requires the FUNCTION throws E; where E is Exception or sub-types;  
		//       my question is:  what if that function does NOT throw any exception at all;  will this work ? 

		@FunctionalInterface
		public interface FunctionWithException<T, R, E extends Exception> {
		    R apply(T t) throws E;
	    }


		// create a wrapper method dealing with exception
		private static <T, R, E extends Exception> 
		  Function<T, R> wrapper(FunctionWithException<T, R, E> fe) {
		    return arg -> {												// note, here returns Function<T, R>
			    try {
				     return fe.apply(arg);
			    } catch (Exception e) {
				    throw new RuntimeException(e);    // convert checked-exception to unchecked
				}
			};
		}



        // usage

		listIntegers.stream().mapToInt(wrapper(s -> 10 / s))
		   .sum();




   1.13)  it says, that is why Spring, Hibernate;  Groovy and Kotlin,  catch all "checked" exceptions, and rethrow them as "unchecked",  because of "checked" exceptions requiring callers to catch !


         Still, the Generic's  lower-bound, upper-bound,  in Streaming methods,  need more practice ...



1/7/18 (Sun)

  1. Angular 5 
      Yeah, these several days on Java;  now, back to Angular 5,  DOING it

	  1.1)  Angular 5 Life Cycle

	      1.1.1)  DoCheck			  (called many times, do not put heavy-lifting stuff here)
		  1.1.2)  AfterContentInit    (called only once)
		  1.1.3)  AfterContentChecked (this is called all the time)
		  1.1.4)  OnDestroy           (also apply the @Output EventEmitter to capture such ngOnDestroy logging from child-component being destroyed)



     1.2)  reading some medium.com post about the ReactiveConf  (all stuff on youtube 9 hours video) https://www.youtube.com/watch?v=62xd25kEZ3o

		   VUE (Evan You)
	       https://blog.reactiveconf.com/reactiveconf-in-the-loop-with-evan-you-26837f4ba35a

		   (some stuff from the blog above)  ==>  UI side changes coming ...

		   I really like the idea of a progressive framework that doesn’t get in your way unless you need it. What are you interested in outside frontend development at the moment?
		   I have been casually following how cryptocurrencies could be used in front end. I have nothing tangible to share but I would recommend people to have a look at it. Check out how Blockchain could be utilised for Application development in the future. Some other hot topics I keep an eye on are: Artificial Intelligence and Virtual Reality.

		   Recently I had the chance to play with HTC vive and that was a mind-blowing experience. In the future, Users won’t be staring at flat screens but immersed in a VR experience! This may take few years but eventually it’s going to happen. The current UI/UX paradigms would have to go through a fundamental shift that will affect how front-end developers build applications.



		  ELM (Richard Feldman)
          https://blog.reactiveconf.com/reactiveconf-in-the-loop-with-richard-feldman-b1b4f7e633aa


		  (ReactiveConf 2017 Live Stream 26th of Oct)
		  https://www.youtube.com/watch?v=62xd25kEZ3o 
		  2 months ago (edited)
		  9:20 - Why JSON is not so good for sync - Victor Grishchenko
		  39:25 - D3 & React - Shirley Xueyang Wu
		  1:38:57 - Migrating Complex Software - Jack Franklin
		  2:10:12 - CSS as Bytecode using Elm - Richard Feldman
		  2:39:36 - ReactXP - How we rebuilt all Skype clients - Peter Lisy
		  4:38:47 - Lightning - Eduard Tsech (No Audio)
		  4:45:00 - Lightning Q&A (Audio comes back in)
		  4:47:06 - Lightning - React Router - Miquel Company
		  4:55:20 - Lightning - Web/Mobile code-sharing (React/Native/Redux) - Lenka Vondrackova
		  5:03:29 - Lightning - Porting Prezi to Elm in 99 lines of code - Matthias Rella
		  5:12:44 - Property-Based Testing for Godly Tests - Gabe Scholz
		  6:09:19 - Reason: JS Flavored OCaml - Jared Forsyth
		  6:34:55 - Network issues and solutions - Andrey Sitnik
		  7:40:24 - Secrets of Glimmer VM - Tom Dale (worth watching)
		  8:14:18 - Animating in Vue.js - Sarah Drasner
		  8:48:18 - Lightning - Webscraping with Algebraic structures - Thomas Sojka
		  8:55:59 - Lightning - Property Based Testing - Honza Brecka
		  9:04:08 - Lightning - Size Limit, Make the web lighter - Andrey Sitnik
		  9:11:00 - Lightning - Promising Future, Monads in React - Albert Nemec
		  9:20:10 - Bonus - Be more productive in 4 min - John Wargo
		  9:24:54 - Bonus - OneGraphApp GraphQL Wrapper - Shawn Grove
		  9:38:32 - Special - Kryptonian & Based God Evan You is presented with birthday cake﻿


 2. Java Generics 
      Generics and Collections in Java 5 (2012) - Naftalin M., Wadler Ph.  - Draft

      2.1)  Basic Generics 

	      2.1.1) Converting Array to List

		     public static <E> List<E> asList(E... array) {
			     List<E> rslt = new ArrayList<>();

				 for (E e : array) {
				     rslt.add(e);
				 }

				 return rslt;
			 }


         2.1.2)  Using the above

		    a)  BasicGenerics.asList(1, 2, 3);

			     2 things happened here:  i) the list arguments 1,2,3 is converted to Array Implecitly
				                         ii) the "type parameter" is inferred, ie, the E is Integer here, due to Array of int[]
										iii) also, there are Auto-boxing, from int to Integer

				   All those happened in Compiler, when Byte-Code is generated.



           b)  now, what if nothing passed in for the "vararg"  (E... array)
		       we need to explicitly put the "type parameter"

			      BasicGenerics.<Integer>asList();

				
				yeah, some strange syntax, but, works




1/9/18 (Tue) 

  1. Modern Java Recipe -  Optional 

     1.1) not to use Optional as data member, because "Optional" is not serializable 

	 1.2) not to use Optional for getter, setter, just use it internally, not to expose to client;  saying returning an Optional from Setter,  may .... ?   not get what they were talking about.

          <=== yet, it says, Hibernate uses Optional a lot in getter, setter for DAOs when null column returned.


			like: 

		public Optional<Manager> getSupervisor() {
		    return Optional.ofNullable(superVisor);
		}


     1.3) Optional flatMap vs map

	    <U> Optional<U> flatMap(Function<? super T, Optional<U>> mapper);

            if the argument T exists, flatMap applies the function to it and returns an Optional wrapping the contained value.
			if the argument T NOT exists, the method returns empty-Optional.



    1.4) apply a function to a collection of Optional instances, but only if they contain a value


		ids.stream()
		   .map(this::findEmployeeById)
		   .filter(Optional::isPresent)
		   .map(Optional::get)
		   .collect(Collectors.toList())



		or

		using Optional.map

		   <U> Optional<U> map(Function<? super T, ? extends U> mapper)


		ids.stream()
		   .map(this::findEmployeeById)
		   .flatMap(optional -> optional.map(Stream::of).orElseGet(Stream::empty))
		   .collect(Collectors.toList());


       
	     <==  findEmployeeById returns Optional<Employee>
		      optional.map(Stream::of) returns Optional<Stream<Employee>>
			  orElseGet extras the contained value, yielding Stream<Employee>


  2. Chapter 7 (File I/O) -- Modern Java Recipes 

     2.1) Nonblocking (or new) i/o package, NIO
	      
		  // check file
		  try(Stream<String> lines = Files.lines(Paths.get("/tmp/test.dat"))) {
		    lines.filter(s -> s.length() > 20)
			     .sorted(Comparator.comparingInt(String::length).reversed())
				 .limit(10)
				 .forEach(w -> System.out.println("%d %s\n", w.length(), w));


	
	      // walking file system
		  try(Stream<Path> paths = Files.walk(Paths.get("/tmp"))) {
		      paths.forEach(System.out::println);
		  }


		  // searching file
		  try(Stream<Path> paths = Files.find(Paths.get("/tmp"), Integer.MAX_VALUE,
		    (path, attributes) -> 
			    !attributes.isDirectory() && path.toString().contains("test.dat"))) {

				paths.forEach(System.out::println);
		   }






  3. Chapter 8 (Time - based on joda-time


     //  now() method

     Instant.now()   2018-01-09T17:27:08.184Z

	 LocalDate.now() 2017-01-09

	 LocalTime.now() 17:27:08.184

	 LocalDateTime.now() 2018-01-09T17:27:08.184

	 ZoneDateTime.now()  2018-01-09T17:27:08.184-05:00[America/New_York]


     // of() method

	 LocalDate ldt = LocalDate.of(2018, Month.JANUARY, 9);

	 LocalTime ltm = LocalTime.of(20, 18);

	 LocalDateTime.of(ldt, ltm);


	 ZoneId.getAvailableZoneIds();




     // plusXYZ(...) method; creating dates and times from Existing instances

	 LocalDate.plusDays(long daysToAdd)

	 LocalTime.plusNanos(long nanosToAdd)


	// with(...) method ;  changing one filed at a time

	LocalDateTime.withNano(int nanoOfSeconds)

	LocalDateTime.withSecond(int seconds)

	LocalDateTime.withMinute(int minutes)

    .
	.
	.



    // Adjusters and Queries

	static TemporalAdjuster firstDayOfNextMonth() 

	static TemporalAdjuster firstDayOfNextYear() 


	LocalDateTime st = LocalDateTime.of(2018, Month.JANUARY, 9, 11, 30);

	LocalDateTime ed = start.with(TemporalAdjusters.firstDayOfNextMonth());	  // note the TemporalAdjusters usage

	assertEquals("2018-02-01T11:30", ed.toString());



    // convert Temporal to LocalDate

	Temporal input ...

	LocalDate.from(input);




    // Convert from java.util.Date to java.time.LocalDate

	use Instant class as a bridge, or java.sql.Date and java.sql.Timestamp methods;  

	===> 
	java.sql.Date sqlDt ...

	sqlDt.toLocalDate();


	==> 
	LocalDate ldt ...

	java.sql.Date.valueOf(ldt);


	==>
	DateFormat df = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");

	LocalDateTime.parse(df.format(java.util.Date), DateTimeFormatter.ISO_LOCAL_DATE_TIME);


    ==> 
	java.util.Date.toInstant() ....

	LocalDate.ofInstant(java.util.Date.toInstant(), ZoneId.systemDefault());




	// Parsing and Formatting

	String tmTxt = LocalDateTime.now().format(DateTimeFormatter.ISO_DATE_TIME);

	LocalDateTime ldt = LocalDateTime.parse(tmTxt);


	// Finding Time Zones with Unusual Offsets

	ZoneId.getAvailableZoneIds().stream()
		  .map(ZoneId::of)
		  .filter(...) 
		  .sorted(Comparator.comparingInt(...) 
		  .forEach(...) 


	// Finding Region Names from Offsets



	// Time between events

	TemporalUnit::between(Temporal inclusive, Temporal exclusive);

	
	// Period class

	Period.until(ChronoLocalDate endDateExclusive);

    Period.between(LocalDate dt, LocalDate dt2);



1/10/18 (Wed) 


  1. Yeah, days back to Angular 5 

     1.1) Angular 5 Life Cycle (cont'd) 

	      template-local-variable only available @ngAfterViewInit ;   but it is NOT available in @ngOnInit 

	 1.2) @ContentChild,  @ViewChild 

	      for Template variables ...


	 1.3) Exercise 4;   and then, the exciting "Directives"!



1/12/18 (Thr)

  1. Modern Java Recipes 

    1.1) takeWhile, dropWhile

	  *) takeWhile - returns the longest prefix of elements taken from this stream that match the given predicate

	      note the "prefix" 


		  List<String> strings = Stream.of("this is a b c of some stuff".split(" "))
		  							   .takeWhile(s -> !s.equals("of"))
									   .collect(Collectors.toList());

		  assertEquals(List.of("this", "is", "a", "b", "c"),  strings);



     *) dropWhile 

	      List<String> strs = Stream.of("this is a b c of some stuff".split(" "))
		  							.dropWhile(s -> !s.equals("of"))
									.collect(Collectors.toList());

		  assertEquals(List.of("of", "some", "stuff"), strs);



    *)  

	   List<Integer> nbrs = (new Random()).ints(50, 0, 100)
	                          .boxed()
							  .sorted(Comparator.reverseOrder())
							  .takeWhile(n -> n >= 90)
							  .collect(Collectors.toList());






1/14/18 (Sat)

  1. did Blockchain study - in separate notes

  2. HTML & CSS - Jon Duckett 2010

     2.1) BLOCK elements
	      
		  <h1>, <p>, <ul>, <li>

	 2.2) Inline elements

	      <a>, <b>, <em>, <img>

	 2.3) Grouping text & elements in a BLOCK

	     <div>


	 2.4) Grouping text & elements INLINE

	     <span>


	 2.5) IFRAMES  (Inline frame) - open a window in a page to display ANOTHER PAGE

	      like embed Google Map,

		  or, show Google Ads  (DFP)

		  *) src attribute - specify URL

		  *) height
		  *) width

		  *) scrolling

		  *) frameborder

		  *) seamless


	 2.6) Information about a PAGE

	      *) <meta> - lives inside <head> element

		     ^  description - commonly used by "search engine" to understand what this page is aboule, max text < 155 chars

			 ^  keyword - comma separated words that a user might search on to find the page.

			 ^  robots - whether search enginers should add this page to their search results or not.  

			 ^  author - author of the page

			 ^  pragma - prevents browser from caching the page, chaching LOCALLY to save time downloading it on subsequent visits

			 ^  expires - when cache should expire.

	
	 2.7)  Escape Characters

	      *)  <  - less-than sign,  &lt;     (&#60;)




	 2.8)  <video  poster="..."  width="400" height="320"  preload controls loop>
	         <source src="video/puppy.mp4" type='video/mp4;codes="avc1.42E01E, mp4a.40.2"' />
		   </video>
		   



1/14/18 (Sun) 

  1. Studying CSS -  HTML & CSS - Jon Duckett 


		*Study - HTML & CSS - Jon Duckett*

		*CSS SELECTORS*

		1. *universal selector*  -  apply to ALL elements in the document;  

			   * { } 


		2.  *type selector* - match element names

			   h1, h2, h3  {}

		3. *class selector*  - css class

			.note { }


		4.  *ID Selector* -  an element whose *id attribute* matches 

			#introduction { }

		5. *child selector* -  matches an element that is a direct child of another 

			li>a { }       -- Targets any <a> elements that are children of an <li> element  (*but not other <a> elements in the page*)  

		6.  *descendant selector* -  matches an element that is a descendent of another specified element (not just a direct child of that element —  so, can be child, grandchild, and grand-grand-child etc)

			p a { }    --  targets any <a> elements that sit inside a <p> element, even if there are other elements nested between them!

		7.  *Adjacent  sibling selector*  --  matching an element that is the next sibling of another  

			h1+p { }   --  Targets the 1st <p> element after any <h1> element  (but not other <p> element)

		8.  *General Sibling Selector*  — matches an element that is a sibling of another, although it does not hae to be the directly preceding element

			h1~p  {  }   -- if you had 2 <p> elements that are siblings of an <h1> element, this rule would apply to BOTH of them.

		<------------------------------------------------------------------------------------------


     
          

1/15/18 (Mon) -  

  1.  Understand CSS cascading - write general styling first which applys to all;  and then, overrides individual elements with specific rule, to override the general styles.


		*resolution for two or more RULES applied to the same element at the same time*

		1. *LAST RULE*  --  when 2 selectors are identical, the LAST one takes precedence

		2. *SPECIFICITY*  —  if one selector is more specific than the others, the more specific one take precedence.

		  h1 is more specific than *

		  p  b  is more specific than p

		  p#intro is more specific than p


		3. *IMPORTANT*  —  adding *!important* after any property value,  to indicate that it should be considered _more important_ than _other rules applying to the same element_.
		[11:57 AM]
		*Understanding how CSS rules cascade, means we can write simpler style sheets,  because we can create generic rules that apply to most elements and then override the properties of individual elements that need to appear differently.*





 2. CSS Inheritance :

    (note, the * added were markdown syntax, not css ones)

		*Inheritance*

		1. *font-family* property is inherited

		2. *background-color,  border properties*  NOT inherited

		3. *can force lot of properties to inherit from parent*

		for example:

		body {
		 font-family: Arial, Verdana, sans-serif;
		 padding: 10px; }

		.page {
		 border: 1px solid #665544;
		 background-color: #efefef;

		 padding:  *inherit*; }





  3.  CSS1 released in 1996
      CSS2          in 1998
      CSS3          in 


      following  



  4. COLOR

		<------------------------------------------------------------------------------------------

		*CSS bug (sometimes called browser quirk)*

		<------------------------------------------------------------------------------------------ (edited)

		ray [12:48 PM]
		*COLOR*

		1. *RGB*     —  rgb(100, 100, 90)

		2.  *HEX*    —  #ee3e80

		3.  *Name*  —  DarkCyan

		4.  *HSLA*  — CSS3 new way,  (later chapter)

		*CSS treats HTML element as if it appears in a box*,   so background-color applies to the some rectangle stuff / box;

		Color - 

		  *HUE* — ?  near to the colloquial idea of color    --->   it is basically decides the COLOR

		  *satuation* — gray,  or light;   at Max saturation, there are no gray



		<------------------------------------------------------------------------------------------

		*Contrast*

		1.  *low contrast*

		 2.  *high contrast*

		 3.  *medium contrast*


		*CSS3: Opacity*

		   rgba(0, 0, 0, 0.5) 

		   *rgba only affect the element on which it is applied,  NOT child elements*

		<------------------------------------------------------------------------------------------
		[12:58 PM]
		*HSL and HSLA*

		HSL — Hue, Saturation, and Lightness

		HSLA  —  A for alpha (opaque stuff)

			H — for HUE,  the 0 to 360 degress,   (in zhong-wen,  se-huan)

			S  —  expressed as % ,   (max saturation has no gray)

			L  — lightness,  as %,  (max saturation has no black) 

			A —  Alpha,  0.5 means 50% transparency …

		<------------------------------------------------------------------------------------------



  5.  TEXT

		1. *serif* — extra details on the ends of main strokes of letters.  (bottom has very short thin line)  

		   *used long time in PRINT business; saying easier to read*

		2. *sans-serif* — having straight ends to letter, 

		   *screens have a lower resolution than print, so, if the text is small, sans-serif fonts can be clearer to read*

		3. *“monospace* — every letter in a monospace (or fixed_width) font is the *SAME WIDTH*

		  *commonly used for code, because they align nicely, making the text easier to FOLLOW*


		<------------------------------------------------------------------------------------------

		ray [1:36 PM]
		4. *Weight*  —  light, medium, bold, black

				 not only adds *emphasis*, but also affect amount of *white space*, and *contrast* on page

		 5. *style*  — Normal, Italic, Oblique

				 oblique font styles take the _normal style* and put it on an *angule*

			   
		 6.  *Stretch*  — Condensed, Regular, Extended

			  _condensed fonts_ closer together,  letters are thinner ,

			 _extended fonts_ thicker and further apart.

		<------------------------------------------------------------------------------------------
		[1:38 PM]
		*Fonts layout (think of these 2 words ---     The xyz*

		1. *baseline* — the letters site in

		 2. *x-height* — height of letter x

		 3.  *Cap height* — top of flat letters

		 4. *Ascender* — above the cap height

		 5.  *descender* — below the baseline.

		<------------------------------------------------------------------------------------------



		ray [2:20 PM]
		*@font-face*

		allows you to use a font, even if it is NOT installed on user’s computer;  by allowing you to specify a PATH to a copy of the font, which will be downloaded if NOT already on user’s computer.

		*Make sure the font’s License allows such download!*

		1. *font-family*

		 2. *src*

		 3. *format*

		<------------------------------------------------------------------------------------------

		ray [2:26 PM]
		*font-weight*  — normal ; bold

		*font-style* — normal, italic, oblique

		*text-transform*  —  uppercase, lowercase, capitalize

		  h1 {
			text-transform: uppercase;}

		*text-decoration* —  none,  underline, overline, line-through, blink

		ray [2:59 PM]
		<------------------------------------------------------------------------------------------

		*Leading (pronounced as ledding)*

		*line-height* — a term typographers use for VERTICAL space between lines of text.   (*descender*, *ascender*)

		*letter-spacing, word-spacing*

		  h2 {
		   letter-spacing: 0.2em; }

		*text-align*  — left, right, center, justify 

		*vertical-align* — baseline, sub, super, top, text-top, middle, bottom, text-bottom

		*text-indent* - to indent the 1st line of text within an element.   # of indents, can be expressed as in px or em.

		*text-shadow* —  becomes commonly used despite lacking support in all browser.    --- create a drop shadow which is a dark version of the word just behind it, and slightly offset.  

		   h3 {
			  text-shadow: -1px -2px #666666; }

		   _1st value indicates how FAR to the left or right the shadow should fall_

		  _2nd value about TOP or BOTTOM the shadow should fall_

		  _3rd value is optional and specifies the amount of BLUR that should apply to the shadow_

		 _4th value is the color of drop shadow_

		<------------------------------------------------------------------------------------------




		ray [3:07 PM]
		*:first-letter,   :first-line*  — specifies different value for 1st letter or line

		 p.intro:first-letter {
		   font-size: 200%; }

		*:link, :visited* — browsers tend to show links in blue with an underline by DEFAULT;  and changing color of links after being visited.

		in CSS, there are 2 *pseudo-classes* allowing doing so;

		 a:link {
			  color: deeppink;
			  text-decoration: none; }

		 a:visited { 
			  color: black; }

		<------------------------------------------------------------------------------------------


		*responding to users*

		1. *:hover*

		ray [3:09 PM]
		added this CSS snippet: :hover, :active, :focus 
		input {
			padding: 6px 12px 6px 12px;
			border: 1px solid #665544;
			color: #ffffff;
		}
		​
		input.submit:hover {
			background-color: #665544;}
		​
		input.submit:active {
			background-color: chocolate;}
		​
		input.text {
			color: #cccccc; }
		​
		input.text:focus {
			color: #665544;}



		Add CommentCollapse 





		ray [3:19 PM]
		<------------------------------------------------------------------------------------------

		*Attribute Selectors*

		  *Selector          Meaning                                          Example*    
		1. *existence* — [ ]  matches specific attribute,        p[class]  (select p element with an attribute called class) 

		2.  *Equality*   — [=]  matches  attrs and val                 p[class=“dog”] targets any <p> with attr called _class_ whose value is dog 


		3.  *Space*  —      [~=]          p[class~=“dog”]  targets any <p> with attr called class whos value is a *LIST* of space-separated words, one of which is dog

		4. *prefix*  — [^=]                  p[attr^“d”]  targets any <p> with an attribute _whose value_ begins with letter “d”

		5. *substring* — [*=]              p[attr*“do”]  targets any <p> with attribute _whose value_ begins with the letter “d”

		6. *suffix*  — [$=]                   p[attr$“g”]   targets any <p> with attribute _whose value_ ends with letter “g”

		   <------------------------------------------------------------------------------------------

		ray [3:28 PM]
		*Styling HTML with CSS (P5D14) - Live Coding with Jesse — a PART of React video tutorial*

		https://www.youtube.com/watch?v=iWbJ9C3lIWQ

		<------------------------------------------------------------------------------------------ (edited)





  2.  Angular 5 study 

      -->  worked on "Course Project"

	      2.1) using @Input, @Output, @ViewChild extensively

		       *) to passing data from parent-component to child-component,  (@Input inside child-component's typescript)
			   *) OR from child-component to parent-component (@output EventEmitter from child-component's typescript)

				   (above 2 forms;  at parent-component Template, either string-interpolation, or event-binding) 

			   *) OR parent-component using @ViewChild on parent-component's own Template variable (which can be on html elements, or child-component)







  3. Mastering Bitcoing - Andreas Antonopoulos 

     (Scanned today's contents, not dig into yet)

     3.1 Chapter 6 - Peer-to-Peer Network Arch.

	 3.2 Chapter 7 - Blockchain

	     3.2.1.  Merkle Tree

		 3.2.2.  blockchain 


	 3.3 Chapter 8 - Mining and Consensus

         3.3.1.  Mining the block	  


         Chapter 9 - Alternative Chains, Currencies and Applications





1/16/18 (Tue) 

  1. CSS - Jon Buckett 

		[11:16 PM]
		*visibility*

		— hidden 

		— visible  

		```visibility:  hidden;```
		  — hides the elem

		<------------------------------------------------------------------------------------------
		[11:18 PM]
		*border iamges  border-image*

		— applies an image to the border of any box.

		ray [11:19 PM]
		added this CSS snippet: Untitled 
		​
		p.one {
			-moz-border-image: url("images/dots.gif") 11 11 11 11 stretch;
			
			-webkit-border-image: url("images/dots.gif") 11 11 11 11 stretch;


		Add CommentClick to expand inline (9 lines)

		ray [11:20 PM]
		:point_up:  *-moz-border-image*   *-webkit-border-image* properties are NOT in css specification;  but they help earlier versions of Chrome, Firefox and Safari to display those effect.
		[11:24 PM]
		<------------------------------------------------------------------------------------------


		*box-shadow* (edited)

		ray [11:30 PM]
		added this CSS snippet: Untitled 
		​
		p.one {
			-moz-box-shadow: -5px -5px #777777;
			-webkit-box-shadow: -5px -5px #777777;
			box-shadown: -5px -5px #777777;


		Add CommentClick to expand inline (6 lines)

		ray [11:30 PM]
		*border-radius  (rounded corners)*

		ray [11:32 PM]
		added this CSS snippet: Untitled 
		p.one {
		  border-radius: 10px;
		  -moz-border-radius: 10px;
		  -webkit-border-radius: 10px;


		Add CommentClick to expand inline (6 lines)

		ray [11:34 PM]
		*elliptical shapes*
		[11:34 PM]
		_border-radius: 80px  50px;
		[11:34 PM]
		```border-top-left-radius:  80px  50px;```






1/20/18 (Sat) -- 

  1. not programming studies Friday (1/19/18)

  2. Angular 5 - Directives

     mentioned (https://www.udemy.com/the-complete-guide-to-angular-2/learn/v4/t/lecture/6656182?start=0) 
	   <div *ngIf='!onlyOdd'> ...

	   is translated into the following by Angular 

	   <ng-template [ngIf]='!onlyOdd'> ....


  3. CSS -- Jon Buckett 

		[10:08 PM]
		*How to identify keywords and phrases*
		1. brainstorm
		2. organize
		3. research
		4. compare
		5. refine
		6. map

		<------------------------------------------------------------------------------------------

		[10:11 PM]
		*analytics: learning about your visitors*

		_signing up_
		_how it works_
		_the tracking code_

		*how many people are coming to your site?*
		_visits_
		_unique visits_
		_page views_
		_pages per visit_
		_average time on site_
		_date selector_
		_export_


		*what are your visitors looking at?*
		_pages_
		_landing pages_
		_top exit pages_
		_bounce rate_

		*where are your visitors coming from?*
		_referrers_
		_direct_
		_search terms_
		_advanced features_

		<------------------------------------------------------------------------------------------

		*Domain names and hosting*
		_domain names_
		_web hosting_
		_disk space_
		_bandwidth_
		_backups_
		_email accounts_
		_server-side languages and databases_
		_hosted services_

		<------------------------------------------------------------------------------------------

		[10:13 PM]
		*MY OWN THINKING ON DESIGN*

		-->  The future *Argument Reality*  and *Virtual Reality*  for User Experience;  specially on *Traveling Industries*  -->  it’d be great to see, touch, get in the hotels, places,  before plan the trip!

		<------------------------------------------------------------------------------------------




1/21/2018 (Sun) 

  1. Go Over CSS - Jon Buckett 
 
     (Konfusion says:  Go over what we learned, and we learn new things)


		ray [2:44 PM]
		added this CSS snippet: @font-face 
		@font-face {
			font-family: 'ChunkFiveRegular';
			src: url('fonts/chunkfive.eot');
		}
		​
		h1, h2 {
			font-family: ChunFiveRegular, Georgia, serif;
		}



		Add CommentCollapse 

		ray [2:44 PM]
		<------------------------------------------------------------------------------------------
		[2:46 PM]
		*font format*

		1. eot
		2. woff
		3. tff / otf
		4. svg

		NOTE,  Chrome and Safari support *svg*,  and some ttf / otf;

					 but IE9  not supporting *svg* yet.

		<------------------------------------------------------------------------------------------

		ray [2:53 PM]
		*responding to users - pseudo classes*

		1. :hover
		2. :active
		3. :focus

		<------------------------------------------------------------------------------------------

		*attribute selectors*

		1. [ ]    —   p[class]  — targets any <p> element which has attribute of *class*

		2. [=]    —  p[class=“dog”]   — targets any <p> element whose class attribute class has value of “dog”

		3. [~=]  — p[class~=“dog”]  — targets any <p> element whose class attribute value is a list of *comma* delimited words, and one of the words is “dog”

		4. [^=]  —  p[attr^“d”]  — targets any <p> element which has an attribute whose value begins with “d” 

		5. [*=]  — p[attr*“do”]  — targets any <p> element which has an attribute whose value contains letters *do*

		6. [$=]  — p[attr$“g”] — targets any <p> element which has an attribute whose value ends with letter “g” 

		<------------------------------------------------------------------------------------------



  2.  Angular 5 - course project 

      2.1 added Directive for the dropdown menu ;  using @HostListener and @HostBinding

      2.2 "services"  --  something like AOP -- cross-cutting;  centralized work (logging, security, data storage) ...




1/27/18 (Sat) 

  1. CSS - 

     *)  Margin - sits outside the edge of the border.  Set margin to create a gap between the borders of two adjacent boxes.

	 *)  Padding - space between border of a box and any contents contained within it.



1/28/18 (Sun)

  1. Angular 5 - yeah,  a while




2/3/18 (Sat) 

  1. yeah, been a while - 
   
     back to 1 time - always tired after back from work. need to sui-jiao earlier.

  2. "Effective Java" - Joshua Bloch (3rd Ed)

     
		*2/3/19 (Sat)*

		*Effective Java - 3rd Ed,  Joshua Bloch*

		Feature             Items                   Release
		Lambdas           42-44                  Java 8 
		Streams             45-48                  Java 8
		Optionals           55                        Java 8
		Default
		  mthods             21                        Java 8
		try-with-
		   resources         9                          Java 7
		@SafeVarargs      32                       Java 7
		Modules              15                       Java 9
		<-----------------------------------------------------------------------------
		*Chapter 2*
		_Creating and Destroying Objects_

		Item 1: *consider static factory methods instead of ctors*


		public static Boolean valueOf(boolean b) {
			return b ? Boolean.TRUE : Boolean.FALSE;
		}

		// Static factory method allows to return SUB-TYPE! 
		// while ctors only returns same-type.


		ray [12:45 PM]
		*some common name for static factory methods*

		*from*      —   Date.from(instant)

		*of*           —   EnumSet.of(JACK, QUEEN, KING)

		*valueOf*  —  BigInteger.valueOf(Integer.MAX_VALUE)

		*instance or getInstance*  — StackWalker.getInstance(options);

		*create or newInstance* — Array.newInstance(classObject, arrayLen)

		*getType*  — Files.getFileStore(path)

		*newType*  — Files.newBufferedReader(path):

		*type*    — Collections.list(legacyLitany);

		<-----------------------------------------------------------------------------

		*Item 2  — consider a builder when faced with many constructor parameters*


		ray [12:49 PM]

		public class ToBuild {
			private final int a;
			private final int b;
			private final int c;
			
			public static class Builder {
				// required para
				private final int a;
				private final int b;
				
				// optional params
				private final int c = 0;
				
				public Builder(int a, int b) {
					this.a = a;
					this.b = b;
				}
				
				public Builder addC(int c) {
					this.c = c;
					return c;
				}
				
				public ToBuild build() {
					return new ToBuild(this);
				}
			}
			
			// Note the private ctor
			private ToBuild(Builder bld) {
				a = bld.a;
				b = bld.b;
				c = bld.c;
			}
		}

		// usage
		ToBuild tB = new ToBuild.Builder(1,2).addC(3).build();



		// *builder pattern well suited to class hierarchies*


			// *builder pattern well suited to class hierarchies*


		public abstract class Pizza {

			public enum Topping { HAM, MUSHROOM, ONION, PEPPER, SAUSAGE }

			final Set<Topping> toppings;
			
			// Pizza.Builder is a "Generic Type" with "recursive type parameter (item 30)
			// This along with abstract "self" method, allows method 
			// chaining to work properly in subclasses, without 
			// the need for casts. 
			// This workaround for the fact that Java lacks a 
			// "self type" is know as "simulated self-type" idiom
			abstract static class Builder<T extends Builder<T>> {
				EnumSet<Topping> toppings = EnumSet.noneOf(Topping.class):
				
				public T addTopping(Topping topping) {
					toppings.add(topping);
					
					return self();   // abstract method to return "this"
				}
				
				// build method
				abstract Pizza build();
				
				// subclasses must override this method to return "this" object
				protected abstract T self();
			}
			
			Pizza<Builder<?> builder> {
				toppings = builder.toppings.clone();  // ? why use clone ?
			}
		}
				
				
				

		// Sub-classing
		public class NyPizza extends Pizza {
			public enum Size { SMALL, MEDIUM, LARGE }
			
			private final Size size;
			
			public static class Builder extends Pizza.Builder<Builder> {
				private final Size size;
				
				public Builder(Size size) {
					this.size = Objects.requireNonNull(size);
				}
				
				@Override
				public NyPizza build() {
					return new NyPizza(this);
				}
				
				@Override
				protected NyPizza Builder self() {
					return this;
				}
				
				// private ctor -- only called in this NyPizza, by NyPizza.Builder inner class.
				private NyPizza(Builder builder) {
					// NyPizza subclass Pizza abstract class
					super(builder);
					size = builder.size;
				}
			}
		}


		// Another subclass of Pizza
		public class Calzon extends Pizza {
			private final boolean sauceInside;
			
			public static Builder extends Pizza.Builder<Builder> {
				private final boolean sauceInside;
				
				public Builder sauceInside() {
					sauceInside = true;
					return this;
				}
				
				// used "coveraint return typing" technique, requiring no-type-casting later on
				@Override 
				public Calzone build() {
					return new Calzon(this);
				}
				
				@Override
				protected Builder self() {
					return this;
				}
				
			}
			
			// private ctor
			private Calzone(Builder builder) {
				// init parent
				super(builder);
				
				// own work
				sauceInside = builder.sauceInside;
			}
		}

		// Usage: 
		NyPizza np = new NyPizza.Builder(MEDIUM)
			.addTopping(SAUSAGE).addTopping(ONION)
			.build();

		Calzone cz = new Calzone.Builder()
			.addTopping(HAM)
			.sauceInside()
			.build();




		tem 3:  enforce singleton property with a private constructor or an enum type*

		1. _making a class a singleton can make it difficult to test its clients, because it’s impossible to substitute a mock for singleton *unless it implements an interface that serves as its type*

		ray [2:12 PM]


		public class Singleton {
			public static final Singleton INSTANCE = new Singleton();
			
			private Singleton() {
			}
			
			public void otherMethod() {
			}
		}

		// Usage
		Singleton s = Singleton.INSTANCE;


		// singleton with static factory

		public class Singleton {
			private static final Singleton INSTANCE = new Singleton();
			
			private Singleton() {
			}
			
			public static Singleton getInstance() {
				return INSTANCE;
			}
			public void otherMethod() {
			}
		}

		// usage
		Singleton s = Singleton.getInstance();



		// single-element enum type is often the BEST way to 
		// implement a singleton.
		//
		// Only limitation is:  cannot use this mechanism IF 
		// your singleton must extend a superclass other than Enum.
		//
		//
		// But, the advantages of this mechanism are:
		// 1) provides an ironclad guarantee against multiple instantiation
		// 2) Concise
		// 3) provides SERIALIZATION for free


		public enum Singleton {
			INSTANCE;
			
			public void otherMethod() {
			}
		}

		// usage
		Singleton s = INSTANCE;


		ray [2:24 PM]
		*item 4: enforce noninstantiability with a _private constructor*

		^^ used in item 3 for “singleton”

		<-----------------------------------------------------------------------------


		ray [2:36 PM]
		*item 5: prefer dependency injection to hardwiring resource (spring framework uses this a lot)*

		*^^ static utility classes and singletons are inappropriate for classes whose behavior is parameterized by an underlying resource*

		*pass the resource into the constructor or setter when creating a new instance - is one form of DEPENDENCY INJECTION*   <-- such DI is used everywhere, that people NOT realize IT.


		*a useful variant of the pattern is to pass a resource factory to the constructor;  such factories embody the Factory Method Pattern*

		`Mosaic create(Supplier<? extends Tile> tileFactory) {...}`

		*^^ the Java 8 Supplier<T> interface is perfect for representing factories.  allow the client to pass in a factory that creates any subtype of a specified type*
		<-----------------------------------------------------------------------------


		tem 6:  avoid creating unnecessary objects - using Flyweight pattern to get objects from POOL*

		*Don’t do following*
		`String s = new String("test");`

		*^^replace the above with literal*
		`String s = "test";   // no new object created`


		*use Pattern instead of String.matches*

		`// performance can be improved!  
		s.matches(“^abc”);`

		*^^ replace with Pattern p = Pattern.compile("^abc");   return p.matchers(str).matches();*

		*^^ the reason is,  String.matches is easiest way to check if a string matches a regular expression;  but NOT suitable for repeated use in performance-critical situations;  because INTERNALLY it creates a Pattern INSTANCE for the regular express and uses it ONLY ONCE, and then that pattern was garbage collected!*

		<-----------------------------------------------------------------------------


		*performance, the following, creates LOTS of Objects, and used once, and garbage collected*

		```private static long sum() {
		  Long sum = 0L;
		  for (long i = 0; i <= Integer.MAX_VALUE; i++) {
			sum += i;
		  }
		  return sum;
		}
		```


		<-----------------------------------------------------------------------------

		*Item 7: elimiate obsolete object references*

		*whenever a class manages its own memory, he programmer should be alert for memory leaks” 

		*another common source of memory leaks is caches*

		*a third common source of memory leaks is listeners and other callbacks* 

		<-----------------------------------------------------------------------------



2/19/18 (Mon) 

  1. being quite a while

  2. Facebook's Yarn Package Manager 

     2.1  Install on Mac ,   when nvm is used


	 yarnpkg.com/lang/en/docs/install/

	 brew install yarn --without-node


	 2.2  using Yarn with Angular 

	   https://theinfogrid.com/tech/developers/angular/setup-angular-touse-yarn-package-manager/



  3. Sharing Data Between Angular Components - Four Methods

    ==>   using "services"  and the @Output EventEmitter in the services;  and subscribe in components.


  4. Improved the Exercise 5 (services),  and 

     starting reviewing what've studied by far.


  5. Need to go for "Routing" ...	 





2/25/18 (Sun) 
					
  1. JavaScript & JQuery - Jon Duckett 

    1.1  to "DELETE" a property of an object,  do the following

	     var anObj = { name: 'Jon',  age: 54 };

		 delete anObj.age 



    1.2  "this" keyword is a "reference" to the "object" in which the "function" operates.


	1.3  "function" - when defined NOT in any object;  then, it's in "Global" scope, defined in "window" object;

	     When a function is defined inside an object; then, the function becomes a 'Method';  



         "Context" <-- the function/method EXECUTION CONTEXT .... ;   


		 var width = 111;
		 var shape = {width: 300};

		 var showWidth = function() {
		     document.write(this.width);   // note, "this" will be the execution context
		 };

		 shape.getWidth = showWidth ;      // assign the "window" function showWidth to object-shape's  getWidth (a method)

		 shape.getWidth() ;                //  note, "this" in the showWidth function,  becomes the "executing object",  which is "shape" object;  so,  "this" means the "shape" obj.



   1.4  three Groups of built-in objects 

       1.4.1  "window" -- current browser window or tab
	             "document" -- current web page
				 "history"  -- pages in browser history
				 "location" -- URL of current page
				 "navigator" -- information about browser
				 "screen"    -- device's display information



       1.4.2   "document object model"  -- tree model


	   1.4.3   "global javascript objects"  -- string / number /boolean / date /math / regex


	          Undefined -- a variable that has been "declared", but no value has been assigned to it yet.

			  null      -- a variable with no value - it may have had one at some point, but no longer has a value.


			  "strict equal to"   ===  :  check both "data type" and "value" are same !

			      so,   '3' === 3   returns false
				        '3' === '3' returns true


              arrays    -- are always objects 
			  functions -- are always objects, with additional feature: they are callable.




  1.5 Cross-Site Scripting (XSS) attacks (p228)

 

  1.6 Event Flow (p260)

     "Event Bubbling"  --  event starts at the most specifi node, and flows outwards to the least specific one.  Widely spupported

	 "Event capturing" --  event starts at the least specific node and flows inwards to the most specific one.  not supported in IE8 and earlier.



  1.7  JQuery -- 


     1.7.1  checking a page is ready to work with

	     $(document).ready(function() {
		    // your script goes here
		 });


	   jQuery shortcut

		 $(function() {
		    // your script goes here
		 });




  1.8  what the book missed

     1.8.1   "hoisting"  --  inside a function;  the local variable scope is "function level",   the variable defined in the middle in the function/method;  that variable may be moved up, after optimize ;  <-- hoisting

            P456 mentioned some:  any variables and functions within each "execution context" are created before they are executed. 
			The preparation phase is often described as taking all of the variables and functions and hosting them to the top of the execution context.




	1.8.1.  "Execution context" -- each execution context also creates its own variables object.  This object contains details of all of the variables, functions, and parameters for that execution context.




	 1.8.2   "closure"   --  the variable of the function/method/object is "captured" inside the "closure";  and exists even when the closing/outside object/func/method is out of scope.


				
				
3/11/18 (Sun) 

   1. NumPy  --  so that better understand Francois Chollet's  "Deep Learning with Python"  


		*NumPy operations*

		1.  import numpy as np

		2.  a = np.arange(8)

		3.  a = a.reshape(2,4)

		4.  aT = np.transpose(a)

			 or 

			 aT = a.T 

		5.  aFlat = a.flatten()

			 aFlat = a.ravel()

		6.   matrix multiplication

			 np.dot(a, a.T)  


			 np.dot(a,  np.transpose(a))


		7.  stacking 

			np.vstack( (a, a) )    

			^^ make the same a matrix stacking vertically 


		   np.hstack( (a, a) )

		8.  *Broadcasting*

			 c = np.arange(8).reshape(2, 4)
			 d = np.arange(4).reshape(1,4)

			  cTd = c * d

			 ^^ here, d tensor has lower dimension than that of c;   so,  d will be broadcasted …. 

		9.  Masking

		     print( a > 3 )

		     print(  a[ a > 3 ] )      # this indexing for elements > 3;  so, only prints elements > 3 with po

        10.  *very beautiful way to get 4D tensor*

			  a = np.arange(2 * 3 * 4 * 2).reshape(2, 3, 4, 2)

			  And then, the following gets all-cube’s  first-face’s  all-rows last-column 

			  a[ :,  0,  :,  -1 ] 


		11.  Get PyDoc from command line 

             help(np.where)

		<-------------------------------------------------------------------------------------------      


  2. Deep Learning with Python -- Francois Chollet 

      P83 "neural-network architects" 

	      doing arts of selecting models, with some best practice and principals;  

		  only PRACTICES can get really better at picking good models!



3/14/18 (Wed) ---

  Good "gcloud" command line documents :  https://cloud.google.com/compute/docs/gcloud-compute/#set_default_zone_and_region_in_your_local_client




     Google Cloud Computing -- for Deep Learning with Python -- Francois Chollet 

	 1)  command line   -- gcloud 

	     https://medium.com/@jamsawamsa/running-a-google-cloud-gpu-for-fast-ai-for-free-5f89c707bae6

		 *)  Google Cloud SDK  (I've already downloaded for the time-tracker project)

		 https://cloud.google.com/sdk/downloads



     2) gcloud 

		 2.0)  set PATH for gcloud  (in .bash_profile ;  my gcloud sdk is in local disk dir)
	     2.1)  change project 
			   
			    https://stackoverflow.com/questions/46770900/how-to-change-the-project-in-gcp-using-cli-commands

				gcloud config set project keras-197804   (note, I've created keras project from Google Cloud Console - web )


          2.2) connect to google cloud instance from command line
		  
		  gcloud compute ssh username@instance  (where username is the google account, ie, gmail account)


		      NOTE:  I created some ssh key  (very basic, my usual t-shi4 password)
		      


		  2.3) Zone (chose us-east1-c  for VM,  and local gcloud command line)

		      https://cloud.google.com/compute/docs/regions-zones/changing-default-zone-region

			  gcloud compute project-info describe --project keras-197804


			  https://cloud.google.com/compute/docs/gcloud-compute/#set_default_zone_and_region_in_your_local_client


			  gcloud config set compute/zone us-east1-c    (had to create the VM in us-east1-c where GPU available :  NVIDIA K80)



          2.4) connect to the VM 

		       gcloud compute ssh my-google-accnt@keras   


			   created pass phrase  (from gcloud command line,  t-shi4)



	      2.5)  up to this point, finally, logged in VM from command line : 


		       @keras:~$ uname -a
			   Linux keras 4.13.0-1011-gcp #15-Ubuntu SMP Mon Feb 12 16:29:04 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux



       
       3. Download NVIDIA cuDA support 


	       http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64/


		   https://medium.com/@jamsawamsa/running-a-google-cloud-gpu-for-fast-ai-for-free-5f89c707bae6
































